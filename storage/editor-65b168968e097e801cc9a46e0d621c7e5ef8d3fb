{"mode":"editor","version":1,"windowDimensions":{"x":0,"y":23,"width":1366,"height":741,"maximized":true},"grammars":{"deserializer":"GrammarRegistry","grammarOverridesByPath":{}},"project":{"paths":["/Users/ustrajunior/code/nextbit/ancar"],"buffers":[{"text":"class SuperMailer < Devise::Mailer\n  helper :application # gives access to all helpers defined within `application_helper`.\n  include Devise::Controllers::UrlHelpers # Optional. eg. `confirmation_url`\n\n  def confirmation_instructions(record, token, opts={})\n    if self.should_send_email?(record.email, record.email_verified)\n      @client = Client.find(record.client_id)\n      @email = record.email\n      @slug = record.slug\n      @token = token\n      opts[:from] = \"SuperWifi <wifi@superwifi.net.br>\"\n      opts[:subject] = I18n.t('devise.email.welcome.subject', client_name: @client.name)\n      opts[:reply_to] = \"wifi@superwifi.net.br\"\n      super\n    end\n  end\n\n  def reset_password_instructions(record, token, opts={})\n    if self.should_send_email?(record.email, record.email_verified)\n      @client = Client.find(record.client_id)\n      @email = record.email\n      @token = token\n      opts[:from] = \"SuperWifi <wifi@superwifi.net.br>\"\n      opts[:subject] = I18n.t('devise.email.reset_password.subject', client_name: @client.name)\n      opts[:reply_to] = \"wifi@superwifi.net.br\"\n      super\n    end\n  end\n\n  def unlock_instructions(record, token, opts={})\n    if self.should_send_email?(record.email, record.email_verified)\n      @client = Client.find(record.client_id)\n      @email = record.email\n      opts[:from] = \"SuperWifi <wifi@superwifi.net.br>\"\n      opts[:subject] = I18n.t('devise.email.unlock.subject', client_name: @client.name)\n      opts[:reply_to] = \"wifi@superwifi.net.br\"\n      super\n    end\n  end\n\n  def should_send_email?(email, verify)\n    return CheckEmail.valid?(email) if verify.blank?\n    verify\n  end\nend\n","markers":{"markers":{"1":{"id":1,"range":[[15,5],[15,5]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":169,"goalScreenRange":null},"deserializer":"Marker"},"333":{"id":333,"range":[[41,0],[43,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[{"patches":[{"oldRange":[[42,6],[42,30]],"newRange":[[42,6],[42,6]],"oldText":"CheckEmail.valid?(email)","newText":"","normalizeLineEndings":true,"oldMarkersSnapshot":{"1":{"range":[[42,6],[42,30]],"valid":true},"125":{"range":[[42,6],[42,30]],"valid":true}},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"oldMarkersSnapshot":{"1":{"range":[[42,6],[42,30]],"valid":true},"125":{"range":[[42,6],[42,30]],"valid":true}},"deserializer":"Transaction"},{"patches":[{"oldRange":[[41,4],[41,4]],"newRange":[[41,4],[41,28]],"oldText":"","newText":"CheckEmail.valid?(email)","normalizeLineEndings":true,"oldMarkersSnapshot":{"131":{"range":[[41,4],[41,4]],"valid":true}},"deserializer":"BufferPatch"},{"oldRange":[[41,0],[41,4]],"newRange":[[41,0],[41,4]],"oldText":"    ","newText":"    ","normalizeLineEndings":true,"deserializer":"BufferPatch"}],"oldMarkersSnapshot":{"1":{"range":[[41,4],[41,4]],"valid":true},"128":{"range":[[42,0],[43,0]],"valid":true},"131":{"range":[[41,4],[41,4]],"valid":true}},"deserializer":"Transaction"},{"patches":[{"oldRange":[[41,28],[41,28]],"newRange":[[41,28],[41,29]],"oldText":"","newText":" ","normalizeLineEndings":true,"oldMarkersSnapshot":{"136":{"range":[[41,28],[41,28]],"valid":true},"137":{"range":[[41,27],[41,28]],"valid":true},"139":{"range":[[41,0],[43,0]],"valid":true}},"deserializer":"BufferPatch"}],"oldMarkersSnapshot":{"1":{"range":[[41,28],[41,28]],"valid":true},"136":{"range":[[41,28],[41,28]],"valid":true},"137":{"range":[[41,27],[41,28]],"valid":true},"138":{"range":[[41,21],[41,22]],"valid":true},"139":{"range":[[41,0],[43,0]],"valid":true}},"deserializer":"Transaction"},{"patches":[{"oldRange":[[41,4],[41,4]],"newRange":[[41,4],[41,5]],"oldText":"","newText":"r","normalizeLineEndings":true,"oldMarkersSnapshot":{"141":{"range":[[41,0],[43,0]],"valid":true},"142":{"range":[[41,4],[41,4]],"valid":true}},"deserializer":"BufferPatch"},{"oldRange":[[41,5],[41,5]],"newRange":[[41,5],[41,6]],"oldText":"","newText":"e","normalizeLineEndings":true,"oldMarkersSnapshot":{"141":{"range":[[41,0],[43,0]],"valid":true},"143":{"range":[[41,5],[41,5]],"valid":true}},"deserializer":"BufferPatch"},{"oldRange":[[41,6],[41,6]],"newRange":[[41,6],[41,7]],"oldText":"","newText":"t","normalizeLineEndings":true,"oldMarkersSnapshot":{"141":{"range":[[41,0],[43,0]],"valid":true},"144":{"range":[[41,6],[41,6]],"valid":true}},"deserializer":"BufferPatch"},{"oldRange":[[41,7],[41,7]],"newRange":[[41,7],[41,8]],"oldText":"","newText":"u","normalizeLineEndings":true,"oldMarkersSnapshot":{"141":{"range":[[41,0],[43,0]],"valid":true},"146":{"range":[[41,7],[41,7]],"valid":true}},"deserializer":"BufferPatch"},{"oldRange":[[41,8],[41,8]],"newRange":[[41,8],[41,9]],"oldText":"","newText":"r","normalizeLineEndings":true,"oldMarkersSnapshot":{"141":{"range":[[41,0],[43,0]],"valid":true},"147":{"range":[[41,8],[41,8]],"valid":true}},"deserializer":"BufferPatch"},{"oldRange":[[41,9],[41,9]],"newRange":[[41,9],[41,10]],"oldText":"","newText":"n","normalizeLineEndings":true,"oldMarkersSnapshot":{"141":{"range":[[41,0],[43,0]],"valid":true},"148":{"range":[[41,9],[41,9]],"valid":true}},"deserializer":"BufferPatch"},{"oldRange":[[41,10],[41,10]],"newRange":[[41,10],[41,11]],"oldText":"","newText":" ","normalizeLineEndings":true,"oldMarkersSnapshot":{"141":{"range":[[41,0],[43,0]],"valid":true},"149":{"range":[[41,10],[41,10]],"valid":true}},"deserializer":"BufferPatch"}],"oldMarkersSnapshot":{"1":{"range":[[41,4],[41,4]],"valid":true},"141":{"range":[[41,0],[43,0]],"valid":true},"142":{"range":[[41,4],[41,4]],"valid":true}},"deserializer":"Transaction"},{"patches":[{"oldRange":[[42,4],[42,4]],"newRange":[[42,4],[42,5]],"oldText":"","newText":"r","normalizeLineEndings":true,"oldMarkersSnapshot":{"151":{"range":[[41,0],[43,0]],"valid":true},"153":{"range":[[42,4],[42,4]],"valid":true}},"deserializer":"BufferPatch"},{"oldRange":[[42,5],[42,5]],"newRange":[[42,5],[42,6]],"oldText":"","newText":"e","normalizeLineEndings":true,"oldMarkersSnapshot":{"151":{"range":[[41,0],[43,0]],"valid":true},"154":{"range":[[42,5],[42,5]],"valid":true}},"deserializer":"BufferPatch"},{"oldRange":[[42,6],[42,6]],"newRange":[[42,6],[42,7]],"oldText":"","newText":"t","normalizeLineEndings":true,"oldMarkersSnapshot":{"151":{"range":[[41,0],[43,0]],"valid":true},"155":{"range":[[42,6],[42,6]],"valid":true}},"deserializer":"BufferPatch"},{"oldRange":[[42,7],[42,7]],"newRange":[[42,7],[42,8]],"oldText":"","newText":"u","normalizeLineEndings":true,"oldMarkersSnapshot":{"151":{"range":[[41,0],[43,0]],"valid":true},"157":{"range":[[42,7],[42,7]],"valid":true}},"deserializer":"BufferPatch"},{"oldRange":[[42,8],[42,8]],"newRange":[[42,8],[42,9]],"oldText":"","newText":"r","normalizeLineEndings":true,"oldMarkersSnapshot":{"151":{"range":[[41,0],[43,0]],"valid":true},"158":{"range":[[42,8],[42,8]],"valid":true}},"deserializer":"BufferPatch"},{"oldRange":[[42,9],[42,9]],"newRange":[[42,9],[42,10]],"oldText":"","newText":"n","normalizeLineEndings":true,"oldMarkersSnapshot":{"151":{"range":[[41,0],[43,0]],"valid":true},"159":{"range":[[42,9],[42,9]],"valid":true}},"deserializer":"BufferPatch"},{"oldRange":[[42,10],[42,10]],"newRange":[[42,10],[42,11]],"oldText":"","newText":" ","normalizeLineEndings":true,"oldMarkersSnapshot":{"151":{"range":[[41,0],[43,0]],"valid":true},"160":{"range":[[42,10],[42,10]],"valid":true}},"deserializer":"BufferPatch"}],"oldMarkersSnapshot":{"1":{"range":[[42,4],[42,4]],"valid":true},"151":{"range":[[41,0],[43,0]],"valid":true},"153":{"range":[[42,4],[42,4]],"valid":true}},"deserializer":"Transaction"},{"patches":[{"oldRange":[[42,11],[42,11]],"newRange":[[42,11],[42,12]],"oldText":"","newText":"v","normalizeLineEndings":true,"oldMarkersSnapshot":{"161":{"range":[[42,11],[42,11]],"valid":true},"162":{"range":[[41,0],[43,0]],"valid":true}},"deserializer":"BufferPatch"},{"oldRange":[[42,12],[42,12]],"newRange":[[42,12],[42,13]],"oldText":"","newText":"e","normalizeLineEndings":true,"oldMarkersSnapshot":{"162":{"range":[[41,0],[43,0]],"valid":true},"163":{"range":[[42,12],[42,12]],"valid":true}},"deserializer":"BufferPatch"},{"oldRange":[[42,13],[42,13]],"newRange":[[42,13],[42,14]],"oldText":"","newText":"r","normalizeLineEndings":true,"oldMarkersSnapshot":{"162":{"range":[[41,0],[43,0]],"valid":true},"165":{"range":[[42,13],[42,13]],"valid":true}},"deserializer":"BufferPatch"},{"oldRange":[[42,14],[42,14]],"newRange":[[42,14],[42,15]],"oldText":"","newText":"i","normalizeLineEndings":true,"oldMarkersSnapshot":{"162":{"range":[[41,0],[43,0]],"valid":true},"166":{"range":[[42,14],[42,14]],"valid":true}},"deserializer":"BufferPatch"},{"oldRange":[[42,15],[42,15]],"newRange":[[42,15],[42,16]],"oldText":"","newText":"f","normalizeLineEndings":true,"oldMarkersSnapshot":{"162":{"range":[[41,0],[43,0]],"valid":true},"167":{"range":[[42,15],[42,15]],"valid":true}},"deserializer":"BufferPatch"},{"oldRange":[[42,16],[42,16]],"newRange":[[42,16],[42,17]],"oldText":"","newText":"y","normalizeLineEndings":true,"oldMarkersSnapshot":{"162":{"range":[[41,0],[43,0]],"valid":true},"168":{"range":[[42,16],[42,16]],"valid":true}},"deserializer":"BufferPatch"}],"oldMarkersSnapshot":{"1":{"range":[[42,11],[42,11]],"valid":true},"161":{"range":[[42,11],[42,11]],"valid":true},"162":{"range":[[41,0],[43,0]],"valid":true}},"deserializer":"Transaction"},{"patches":[{"oldRange":[[43,4],[45,7]],"newRange":[[43,4],[43,4]],"oldText":"elsif verify\n      true\n    end","newText":"","normalizeLineEndings":true,"oldMarkersSnapshot":{"1":{"range":[[43,4],[45,7]],"valid":true}},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"oldMarkersSnapshot":{"1":{"range":[[43,4],[45,7]],"valid":true},"170":{"range":[[41,0],[43,0]],"valid":true}},"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[43,4],[43,4]],"reversed":false},"newParams":{"range":[[43,2],[43,4]],"reversed":true},"deserializer":"MarkerPatch"},{"oldRange":[[43,2],[43,4]],"newRange":[[43,2],[43,2]],"oldText":"  ","newText":"","normalizeLineEndings":true,"oldMarkersSnapshot":{"1":{"range":[[43,2],[43,4]],"valid":true},"174":{"range":[[41,0],[44,0]],"valid":true},"175":{"range":[[43,2],[43,4]],"valid":true}},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[43,2],[43,2]]},"newParams":{"range":[[43,0],[43,2]]},"deserializer":"MarkerPatch"},{"oldRange":[[43,0],[43,2]],"newRange":[[43,0],[43,0]],"oldText":"  ","newText":"","normalizeLineEndings":true,"oldMarkersSnapshot":{"1":{"range":[[43,0],[43,2]],"valid":true},"174":{"range":[[41,0],[44,0]],"valid":true},"177":{"range":[[43,0],[43,2]],"valid":true}},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[43,0],[43,0]]},"newParams":{"range":[[42,19],[43,0]]},"deserializer":"MarkerPatch"},{"oldRange":[[42,19],[43,0]],"newRange":[[42,19],[42,19]],"oldText":"\n","newText":"","normalizeLineEndings":true,"oldMarkersSnapshot":{"1":{"range":[[42,19],[43,0]],"valid":true},"174":{"range":[[41,0],[44,0]],"valid":true}},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"oldMarkersSnapshot":{"1":{"range":[[43,4],[43,4]],"valid":true},"173":{"range":[[43,4],[43,4]],"valid":true},"174":{"range":[[41,0],[44,0]],"valid":true}},"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[42,19],[42,19]]},"newParams":{"range":[[42,18],[42,19]]},"deserializer":"MarkerPatch"},{"oldRange":[[42,18],[42,19]],"newRange":[[42,18],[42,18]],"oldText":" ","newText":"","normalizeLineEndings":true,"oldMarkersSnapshot":{"1":{"range":[[42,18],[42,19]],"valid":true},"180":{"range":[[41,0],[43,0]],"valid":true},"181":{"range":[[42,18],[42,19]],"valid":true}},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"oldMarkersSnapshot":{"1":{"range":[[42,19],[42,19]],"valid":true},"179":{"range":[[42,19],[42,19]],"valid":true},"180":{"range":[[41,0],[43,0]],"valid":true}},"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[42,18],[42,18]]},"newParams":{"range":[[42,17],[42,18]]},"deserializer":"MarkerPatch"},{"oldRange":[[42,17],[42,18]],"newRange":[[42,17],[42,17]],"oldText":" ","newText":"","normalizeLineEndings":true,"oldMarkersSnapshot":{"1":{"range":[[42,17],[42,18]],"valid":true},"183":{"range":[[41,0],[43,0]],"valid":true},"184":{"range":[[42,17],[42,18]],"valid":true}},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"oldMarkersSnapshot":{"1":{"range":[[42,18],[42,18]],"valid":true},"182":{"range":[[42,18],[42,18]],"valid":true},"183":{"range":[[41,0],[43,0]],"valid":true}},"deserializer":"Transaction"},{"patches":[{"oldRange":[[42,4],[42,11]],"newRange":[[42,4],[42,4]],"oldText":"return ","newText":"","normalizeLineEndings":true,"oldMarkersSnapshot":{"1":{"range":[[42,4],[42,11]],"valid":true},"186":{"range":[[41,0],[43,0]],"valid":true},"244":{"range":[[42,4],[42,11]],"valid":true}},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"oldMarkersSnapshot":{"1":{"range":[[42,4],[42,11]],"valid":true},"186":{"range":[[41,0],[43,0]],"valid":true},"244":{"range":[[42,4],[42,11]],"valid":true}},"deserializer":"Transaction"}],"redoStack":[{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"oldRange":[[41,11],[41,11]],"newRange":[[41,11],[41,21]],"oldText":"","newText":"CheckEmail","normalizeLineEndings":true,"newMarkersSnapshot":{"1":{"range":[[41,11],[41,21]],"valid":true},"246":{"range":[[41,0],[43,0]],"valid":true},"285":{"range":[[41,11],[41,21]],"valid":true}},"oldMarkersSnapshot":{"289":{"range":[[41,0],[43,0]],"valid":true},"306":{"range":[[41,11],[41,11]],"valid":true}},"deserializer":"BufferPatch"}],"oldMarkersSnapshot":{"1":{"range":[[41,11],[41,11]],"valid":true},"289":{"range":[[41,0],[43,0]],"valid":true},"291":{"range":[[0,11],[0,17]],"valid":true},"292":{"range":[[0,28],[0,34]],"valid":true},"306":{"range":[[41,11],[41,11]],"valid":true}},"newMarkersSnapshot":{"1":{"range":[[41,11],[41,21]],"valid":true},"246":{"range":[[41,0],[43,0]],"valid":true},"285":{"range":[[41,11],[41,21]],"valid":true},"286":{"range":[[0,11],[0,17]],"valid":true},"287":{"range":[[0,28],[0,34]],"valid":true}},"deserializer":"Transaction"}],"deserializer":"History","version":1},"encoding":"utf8","filePath":"/Users/ustrajunior/code/nextbit/ancar/app/mailers/super_mailer.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"23d474af19aaf87be08aeb0eeea4969eafbc043f","deserializer":"TextBuffer"},{"text":"Devise::Async.setup do |config|\n  config.enabled = true\n  config.backend = :sidekiq\n  config.queue   = :devise\nend","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":201},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History","version":1},"encoding":"utf8","filePath":"/Users/ustrajunior/code/nextbit/ancar/config/initializers/devise_async.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"461f299499340b77428b5474f5d9cfd07a378710","deserializer":"TextBuffer"},{"text":"class User < ActiveRecord::Base\n  has_paper_trail :on => [:update, :destroy], :skip => [:actions, :user_identify, :last_sign_in_at, :current_sign_in_at, :sign_in_count, :confirmation_token, :updated_at, :confirmation_sent_at, :unconfirmed_email, :failed_attempts, :current_sign_in_ip, :last_sign_in_ip, :client_id, :provider, :uid, :password_changed, :password_unchanged, :sms_token, :sms_token_sent_at, :unlock_token, :password_reset_count, :sms_confirmed_at, :remember_created_at, :reset_password_token, :reset_password_sent_at, :remember_token, :slug, :accepted_terms_at]\n  # Include default devise modules. Others available are:\n  # :token_authenticatable,\n  # :timeoutable and :omniauthable, :confirmable, :recoverable, :validatable\n  devise :database_authenticatable, :registerable, :confirmable,\n         :rememberable, :trackable,\n         :lockable, :async#, :omniauthable, :omniauth_providers => [:facebook]\n\n  paginates_per 15\n\n  extend FriendlyId\n  friendly_id :login, :use => [:slugged, :finders]\n\n  default_scope { where(valid_record: true) }\n\n  attr_accessor :login\n  attr_accessor :radius_username\n  attr_accessor :country_code\n  attr_accessor :updating_phone\n\n  VALIDACAO_GROUP = 'validacao'\n  NAVNORMAL_GROUP = 'navnormal'\n  ROLES = %w(user super admin nextbit)\n\tEMAIL_REGEXP = /\\A([\\w\\.%\\+\\-]+)@([\\w\\-]+\\.)+([\\w]{2,})\\z/i\n\tPASSWORD_LENGTH = 8..128\n\n\tvalidates :name, presence: true\n\tvalidate  :name_with_last_name\n\tvalidates :birth_date, presence: true\n\tvalidates :gender, presence: true\n\tvalidates :phone, presence: true\n\tvalidates :phone_country, presence: true, if: :passport_number?\n\tvalidate :phone_with_code\n\tvalidate :phone_with_special_characters\n\tvalidate :phone_with_only_numbers\n\tvalidates :role, presence: true, inclusion: { in: ROLES }\n\tvalidates :cpf, presence: true, cpf: true, :uniqueness => { :scope => :valid_record }, if: :is_cpf_required?\n\tvalidates :passport_number, presence: true, if: :is_passport_required?\n\tvalidates :passport_country, presence: true, if: :passport_number?\n  validates :accepted_terms, acceptance: { accept: true }, if: :new_record?\n  validates :email, presence: true, :uniqueness => { :scope => :valid_record, allow_blank: true, if: :email_changed?}\n  validates_format_of       :email, with: EMAIL_REGEXP, allow_blank: true, if: :email_changed?\n  validates_presence_of     :password, if: :validate_password?\n  validates_confirmation_of :password, if: :validate_password?\n  validates_length_of       :password, within: PASSWORD_LENGTH, if: :validate_password?\n\n  after_create :export_to_radius\n  after_update :reset_counters\n  before_update :check_crm\n  before_create :set_accepted_terms_at\n  before_create :generate_sms_code\n  before_create :set_age\n  before_create :set_client\n  before_validation :clean_phone\n  before_save :format_cpf\n\n  has_and_belongs_to_many :permissions\n  belongs_to :permission_group\n  has_and_belongs_to_many :clients\n  has_many :user_logs\n  belongs_to :client\n  has_many :tickets\n  has_many :sms_reports\n  has_many :invalid_users;\n  has_many :social_connections\n\n  accepts_nested_attributes_for :permissions\n\n  scope :admins, -> { where(role: 'admin') }\n  scope :supers, -> { where(role: 'super') }\n  scope :nextbits, -> { where(role: 'nextbit') }\n  scope :users, -> { where(role: 'user') }\n  scope :confirmed_today, -> { where(\"confirmed_at >= ?\", Time.zone.now.beginning_of_day) }\n  scope :created_today, -> { where('users.created_at >= ? and users.created_at <= ?', Time.zone.now.beginning_of_day, Time.zone.now.end_of_day) }\n  scope :not_confirmed, -> { where(confirmed_at: nil) }\n\n  def validate_password?\n    encrypted_password.nil? || new_record?\n  end\n\n  def check_crm\n    if complete_for_crm? && fields_changed?(self) && user_identify?\n      self.actions = 'crm_update'\n    elsif complete_for_crm? && !fields_changed?(self) && !user_identify?\n      self.actions = 'crm_insert'\n    end\n  end\n\n  def fields_changed?(user)\n    (user.name_changed? || user.email_changed? || user.gender_changed? || user.cpf_changed? || user.birth_date_changed? || user.phone_changed?)\n  end\n\n  def is_cpf_required?\n    !passport_number.present? && ['riodesignbarra','parquebandeiras', 'riodesignleblon', 'downtown', 'viasulshopping'].include?(Client.current_subdomain)\n  end\n\n  def is_passport_required?\n    !cpf.present? && ['riodesignbarra','parquebandeiras', 'riodesignleblon', 'downtown', 'viasulshopping'].include?(Client.current_subdomain)\n  end\n\n  def completing?\n    !new_record? && updating_phone.nil?\n  end\n\n  def full_confirmed?\n    sms_confirmed? && email_confirmed?\n  end\n\n  def any_confirmation?\n    sms_confirmed? || email_confirmed? || forced_confirmation\n  end\n\n  def email_confirmed?\n    !confirmed_at.nil?\n  end\n\n  def complete_for_crm?\n    (Phone.valid?(phone, phone_country) && ((!cpf.blank? && CPFValidation.new(cpf).valido? && cpf == Cpf.formatted(cpf)) || !passport_number.blank?) && !gender.blank? && !birth_date.blank? && !email.blank?)\n  end\n\n  def completed_registration?\n    if ['riodesignbarra','parquebandeiras', 'riodesignleblon', 'downtown', 'viasulshopping'].include?(Client.current_subdomain)\n      (Phone.valid?(phone, phone_country) && ((!cpf.blank? && CPFValidation.new(cpf).valido? && cpf == Cpf.formatted(cpf)) || !passport_number.blank?) && !gender.blank? && !birth_date.blank? && !email.blank?)\n    else\n      (Phone.valid?(phone, phone_country) && !gender.blank? && !birth_date.blank? && !email.blank?)\n    end\n  end\n\n  def has_to_complete_registration?\n    sign_in_count > 1 && !completed_registration?\n  end\n\n  def format_cpf\n    self.cpf = Cpf.formatted(self.cpf)\n  end\n\n  def only_cpf_numbers\n    Cpf.only_numbers(self.cpf)\n  end\n\n  def self.check_identity(cpf, passport)\n    user = self.check_cpf(cpf) if Cpf.present?(cpf)\n    if user.nil?\n      user = self.check_passport(passport) if Cpf.present?(passport)\n    end\n    user\n  end\n\n  def self.check_passport(passport)\n    where(passport_number: passport).first\n  end\n\n  def self.check_cpf(cpf)\n    where(cpf: Cpf.formatted(cpf)).first\n  end\n\n  def self.admins_by_client(client_id=nil)\n    Rails.cache.fetch(['users', 'admins_by_client', client_id, self]) do\n      client_id.nil? ? admins : where(client_id: client_id).admins\n    end\n  end\n\n  def self.by_client(client_id=nil)\n    Rails.cache.fetch(['users', 'by_client', client_id, self]) do\n      client_id.nil? ? users : where(client_id: client_id).users\n    end\n  end\n\n  def self.by_group(group_id)\n    Rails.cache.fetch(['users', 'by_group', group_id, self]) do\n      joins(\"INNER JOIN clients on clients.id = users.client_id\").\n        joins(\"INNER JOIN groups on clients.group_id = groups.id\").\n        where(\"groups.id = ?\", group_id).users\n    end\n  end\n\n  def accept_terms!\n    self.accepted_terms = true\n    self.accepted_terms_at = Time.zone.now\n    self.save(validate: false)\n  end\n\n  def must_accept_terms?\n    self.accepted_terms == false\n  end\n\n  def set_accepted_terms_at\n    self.accepted_terms_at = self.created_at\n  end\n\n  def md5_radius_user_pass\n    MD5Generator.new_radius_pass(\"#{id}\")\n  end\n\n  def active_for_authentication?\n    true\n  end\n\n  def radius_username\n\t\temail\n  end\n\n  def client_admin?\n    role == 'admin'\n  end\n\n  def admin?\n    role == 'admin' || role == 'nextbit' || role == 'super'\n  end\n\n  def nextbit?\n    role == 'nextbit'\n  end\n\n  def valid_sms_token?(token)\n   true if token != nil &&\n      sms_token != nil &&\n      sms_token.to_i == token.to_i\n  end\n\n  def confirm_sms_token(token)\n    if valid_sms_token?(token)\n      self.sms_token_sent_at = nil\n      self.sms_confirmed = true\n      self.sms_confirmed_at = Time.zone.now\n      self.sms_token = nil\n      self.save(validate: false)\n    end\n  end\n\n  def confirm!\n    super\n  end\n\n  def generate_sms_code\n    self.sms_token = loop do\n      token = rand.to_s[2..11]\n      break token unless User.select(:sms_token).find_by(sms_token: token)\n    end\n  end\n\n  def send_sms_token(options={})\n    options.reverse_merge! action: SmsReport::REGISTRATION\n\n    return false if options[:link].nil?\n\n    msg = I18n.t(\"sms.messages.#{options[:action]}\", client_name: options[:client].name, link: options[:link])\n    options.reverse_merge! to: self.full_phone, msg: I18n.transliterate(msg), user_id: id\n\n    super_sms = SuperSMS.new(options)\n    if super_sms.send_token\n      self.update_columns(sms_token_sent_at: Time.zone.now, active: true)\n    end\n  end\n\n  def full_phone\n    \"#{phone_country_code}#{phone}\"\n  end\n\n  def self.find_by_login(login)\n    if login.include?('@')\n      where([\"email = :email\", { email: login }]).first\n    else\n      where([\"phone = :phone\", { phone: User.only_numbers(login) }]).first\n    end\n  end\n\n  def login\n    User.only_numbers(phone) || email\n  end\n\n  def phone_country_code\n    user_phone_country.country_code\n  end\n\n  def user_phone_country\n    user_country = phone_country? ? phone_country : 'brazil'\n    Country.find_country_by_name(user_country)\n  end\n\n  def phone_with_code\n    unless Phone.valid_code_and_length?(phone, phone_country)\n      errors.add(:phone, I18n.t('activerecord.errors.models.user.phone_needs_area_code'))\n    end\n  end\n\n  def phone_ninth_digit\n    if Phone.needs_the_ninth_digit?(phone, phone_country)\n      errors.add(:phone, I18n.t('activerecord.errors.models.user.phone_needs_ninth_digit'))\n    end\n  end\n\n  def phone_with_special_characters\n    if Phone.with_special_character?(phone)\n      errors.add(:phone, I18n.t('activerecord.errors.models.user.phone_with_special_characters'))\n    end\n  end\n\n  def phone_with_only_numbers\n    unless Phone.only_numbers?(phone)\n      errors.add(:phone, I18n.t('activerecord.errors.models.user.phone_with_only_numbers'))\n    end\n  end\n\n  # def phone_code_area\n  #   if phone? && (!phone_country.present? || (phone_country.present? && phone_country == 'brazil')) && !CodeAreas.valid?(phone[0..1])\n  #     errors.add(:phone, I18n.t('activerecord.errors.models.user.invalid_code_area'))\n  #   end\n  # end\n\n  def self.new_with_session(params, session)\n    super.tap do |user|\n      if data = session[\"devise.facebook_data\"] && session[\"devise.facebook_data\"][\"extra\"][\"raw_info\"]\n        user.email = data[\"email\"] if user.email.blank?\n      end\n    end\n  end\n\n  def self.find_for_facebook_oauth(auth)\n    where(auth.slice(:provider, :uid)).first\n  end\n\n  def update_with_password(params, *options)\n    if encrypted_password.blank?\n      update_attributes(params, *options)\n    else\n      super\n    end\n  end\n\n  def confirm_user\n    self.sms_token_sent_at = nil\n    self.sms_token = nil\n    self.forced_confirmation = true\n    self.save(validate: false)\n  end\n\n  # check email address with mailgun webservice\n  # api_key=pubkey-5ogiflzbnjrljiky49qxsiozqef5jxp7&address=asas@asasas.com\n  def valid_email?\n    if Rails.env.production?\n      begin\n        mailgun_url = URI( Rails.application.secrets.mailgun_validate_email_url )\n        pub_key = Rails.application.secrets.mailgun_key\n        bounce_url = \"#{Rails.application.secrets.mailgun_bounce_check_url}#{email}\"\n        (check_email_on_mailgun(mailgun_url, pub_key, email) && check_bounce_on_mailgun(bounce_url)) ? true : false\n      rescue EmailVerifier::FailureException, EmailVerifier::NoMailServerException, EmailVerifier::OutOfMailServersException, EmailVerifier::NotConnectedException => e\n        false\n      end\n    else\n      true\n    end\n  end\n\n  def normalize_friendly_id(string)\n    SecureRandom.uuid\n  end\n\n  def max_password_resets?\n    password_reset_count <= 2\n  end\n\n  private\n\n  def clean_phone\n    if phone?\n      self.phone = User.only_numbers(phone) if phone.match(/[^0-9]/)\n    end\n  end\n\n  def self.only_numbers(value)\n    response = (value == '' || value.nil?) ? nil : value.gsub(/[^0-9]/, \"\")\n    response = value if response == ''\n    response\n  end\n\n  def set_client\n    self.client_id = Client.current_id\n  end\n\n  def set_age\n    self.age = Calculations.age(birth_date)\n  end\n\n  def reset_counters\n    if self.encrypted_password_changed?\n      self.update_column(:password_reset_count, 0)\n    end\n  end\n\n  def cpf_formatted\n    unless Cpf.formatted?(cpf)\n      errors.add(:cpf, I18n.t('activerecord.errors.models.user.not_formatted'))\n    end\n  end\n\n  def passport_with_empty_space\n    if passport_number? && passport_number.match(/\\s/)\n      errors.add(:passport_number, I18n.t('activerecord.errors.models.user.invalid_passport_number'))\n    end\n  end\n\n  def name_with_last_name\n    if name && name.split(' ').size < 2\n      errors.add(:name, I18n.t('activerecord.errors.models.user.last_name'))\n    end\n  end\n\n  def export_to_radius\n    RadCheck.save_on_radius(self)\n    RadUserGroup.save_user_group(self, NAVNORMAL_GROUP)\n  end\n\n  def self.find_first_by_auth_conditions(warden_conditions)\n    conditions = warden_conditions.dup\n    if login = conditions.delete(:login)\n      if login.include?(\"@\")\n        where(conditions).where([\"email = :email\", { email: login }]).first\n      else\n        where(conditions).where([\"phone = :phone\", { phone: User.only_numbers(login) }]).first\n      end\n    else\n      where(conditions).first\n    end\n  end\n\n  def check_email_with_smtp(address)\n    EmailVerifier.check(address)\n  end\n\n  def check_email_on_mailgun(uri, pub_key, address)\n    Net::HTTP.start(uri.host, uri.port, :use_ssl => uri.scheme == 'https') do |http|\n      request = Net::HTTP::Get.new(uri.request_uri)\n      request.set_form_data({ api_key: pub_key,\n                            address: address,\n                          })\n      response = ActiveSupport::JSON.decode(http.request(request).body)\n      response[\"is_valid\"]\n    end\n  end\n\n  def check_bounce_on_mailgun(uri_check)\n    RestClient.get(uri_check) do |response|\n      res =  JSON.parse(response).with_indifferent_access\n      return res[:message] =~ /Address not found in bounces table/\n    end\n  end\nend\n","markers":{"markers":{"1":{"id":1,"range":[[1,195],[1,212]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":209,"autoscroll":true},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History","version":1},"encoding":"utf8","filePath":"/Users/ustrajunior/code/nextbit/ancar/app/models/user.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"cc5846db385fa984c01c33068f94615d5f05dcf6","deserializer":"TextBuffer"},{"text":"source 'http://rubygems.org'\n\n# ruby '2.1.2'\n\ngem 'rails'                         , '4.1.5'\ngem 'sass-rails'                    , '~> 4.0.1'\ngem 'compass-rails'                 , '~> 1.1.7'\ngem 'uglifier'                      , '>= 2.5.0'\ngem 'coffee-rails'                  , '~> 4.0.1'\ngem 'jquery-rails'\ngem 'jquery-ui-rails'               , '~> 4.2.1'\ngem 'jquery-turbolinks'             , '~> 2.0.2'\ngem 'turbolinks'\ngem \"therubyracer\"                  , \"~> 0.12.1\"\ngem 'devise'                        , '~> 3.2.3'\ngem 'simple_form'                   , '~> 3.0.1'\ngem 'safe_attributes'               , '~> 1.0.10', require: 'safe_attributes/base'\ngem 'draper'                        , '~> 1.3.0'\ngem 'cancancan'                     , '~> 1.9.2'\ngem 'carrierwave'                   , '~> 0.10.0'\ngem 'mini_magick'                   , '~> 3.7.0'\ngem 'countries'                     , '~> 0.9.3'\ngem 'country_select'                , '~> 1.3.1'\ngem 'inherited_resources'           , '~> 1.4.1'\ngem 'responders'                    , '~> 1.0.0.rc'\ngem 'mysql2'                        , '~> 0.3.15'\ngem 'dalli'                         , '~> 2.7.0'\ngem 'paper_trail'                   , '~> 3.0.1'\ngem 'browser'                       , '>= 0.4'\ngem 'fog'                           , '~> 1.22.0'\ngem 'globalize'                     , '~> 4.0.2'\ngem 'kaminari'                      , '~> 0.16.0'\ngem 'i18n-js'                       , git: 'https://github.com/fnando/i18n-js.git' #'~> 2.1.2'\n# gem 'omniauth-facebook'             , '~> 1.6.0'\ngem 'koala'\ngem 'rest_client'                   , '~> 1.7.3'\ngem 'sidekiq'                       , '~> 3.2.5'\ngem 'sinatra'                       , '>= 1.3.0', :require => nil\ngem 'oneapi-ruby'                   , '~> 1.0.1'\ngem 'devise-async'                  , '~> 0.9.0'\ngem 'email_verifier'                , '~> 0.0.7'\ngem 'json'                          , '~> 1.8.1'\ngem 'friendly_id'                   , '~> 5.0.4'\ngem 'timezone'                      , '~> 0.3.2'\ngem 'appsignal'\ngem 'typhoeus'                      , '~> 0.6.9'\n\ngroup :doc do\n  gem 'sdoc'                        , require: false\nend\n\ngroup :development do\n  gem 'better_errors'               , '~> 1.1.0'\n  gem 'binding_of_caller'           , '~> 0.7.2'\n  gem 'letter_opener_web'           , '~> 1.1.0'\n  gem 'pry-rails'                   , '~> 0.3.2'\n  # gem 'puma'                        , '~> 2.8.1'\n  gem 'spring'\n  gem 'thin'\n  gem 'foreman'\nend\n\ngroup :test do\n  gem 'turnip'                      , '~> 1.2.2'\n  gem 'capybara'                    , '~> 2.4.1'\n  gem 'cpf_generator'               , '~> 1.0.0', require: false\n  gem 'database_cleaner'\n  gem 'simplecov'                   , '~> 0.8.2', require: false\n  gem 'fakeweb'                     , '~> 1.3'\n  gem 'rack_session_access'         , '~> 0.1.1'\n  # gem 'capybara-webkit'             , '~> 1.1.0'\n  # gem 'selenium-webdriver'          , '~> 2.41.0'\n  gem 'poltergeist'\n  gem 'rb-fsevent' if `uname` =~ /Darwin/\n  gem 'spring-commands-rspec'\nend\n\ngroup :development, :test do\n  gem 'timecop'                     , '~> 0.7.1'\n  gem 'rspec-rails'                 , '~> 3.1.0'\n  gem 'factory_girl_rails'          , '~> 4.4.0'\n  gem 'quiet_assets'                , '~> 1.0.2'\n  gem 'awesome_print'               , require: false\n  gem 'metric_fu'                   , '~> 4.8.0'\n  gem 'ffaker'                      , '~> 1.23.0', require: false\n  gem 'pry-byebug'\nend\n\ngroup :production do\n  gem 'unicorn'                     , '~> 4.8.2'\nend\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":217},"deserializer":"Marker"},"2":{"id":2,"range":[[0,0],[0,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History","version":1},"encoding":"utf8","filePath":"/Users/ustrajunior/code/nextbit/ancar/Gemfile","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"06cac6c912ae422b76e7e7e22816ad96f9e39731","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"id":34,"items":[{"id":169,"softTabs":true,"displayBuffer":{"id":170,"softWrapped":true,"editorWidthInChars":null,"scrollTop":32,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/ustrajunior/code/nextbit/ancar/app/mailers/super_mailer.rb","invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"TokenizedBuffer"},"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":209,"softTabs":true,"displayBuffer":{"id":210,"softWrapped":true,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/ustrajunior/code/nextbit/ancar/app/models/user.rb","invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"TokenizedBuffer"},"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":217,"softTabs":true,"displayBuffer":{"id":218,"softWrapped":true,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/ustrajunior/code/nextbit/ancar/Gemfile","invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"TokenizedBuffer"},"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":201,"softTabs":true,"displayBuffer":{"id":202,"softWrapped":true,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/ustrajunior/code/nextbit/ancar/config/initializers/devise_async.rb","invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"TokenizedBuffer"},"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"}],"activeItemURI":"/Users/ustrajunior/code/nextbit/ancar/Gemfile","focused":true,"flexScale":1,"deserializer":"Pane"},"activePaneId":34,"deserializer":"PaneContainer","version":1},"fullScreen":false,"packagesWithActiveGrammars":["language-ruby","language-hyperlink","language-todo"],"deserializer":"Workspace"},"packageStates":{"fuzzy-finder":{"/Users/ustrajunior/code/nextbit/ancar/app/mailers/super_mailer.rb":1431019420121,"/Users/ustrajunior/code/nextbit/ancar/app/models/user.rb":1431021174661,"/Users/ustrajunior/code/nextbit/ancar/Gemfile":1431022153510,"/Users/ustrajunior/code/nextbit/ancar/config/initializers/devise_async.rb":1431019313427},"keybinding-resolver":{},"metrics":{"sessionLength":138321288},"tree-view":{"directoryExpansionStates":{"/Users/ustrajunior/code/nextbit/ancar":{"isExpanded":true,"entries":{".git":{"isExpanded":false,"entries":{}},"app":{"isExpanded":false,"entries":{}},"bin":{"isExpanded":false,"entries":{}},"config":{"isExpanded":false,"entries":{}},"coverage":{"isExpanded":false,"entries":{}},"db":{"isExpanded":true,"entries":{"migrate":{"isExpanded":false,"entries":{}}}},"lib":{"isExpanded":false,"entries":{}},"log":{"isExpanded":false,"entries":{}},"public":{"isExpanded":false,"entries":{}},"spec":{"isExpanded":false,"entries":{}},"tmp":{"isExpanded":false,"entries":{}},"vendor":{"isExpanded":false,"entries":{}}}}},"selectedPath":"/Users/ustrajunior/code/nextbit/ancar/Gemfile","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":201},"find-and-replace":{"viewState":"","modelState":{"useRegex":false,"inCurrentSelection":false,"caseSensitive":false,"wholeWord":false},"projectViewState":"","resultsModelState":{"useRegex":false,"caseSensitive":false},"findHistory":["visible_banners","no_age","disable","disabled_by_user","disabled_by_admin","mail","password","password_required","current_locale","log","reset_password","email","email:","User.id","password_required","riodesignbarra","boulevardrioshopping","dup_email_or_phone","dup_email","confirmation_instructions","reconfirmable","allow_unconfirmed_access_for","mailer","unconfirmed_email","therubyracer"],"replaceHistory":["go_to_internet_path"],"pathsHistory":["go_to_internet_path"]}}}