{"mode":"editor","version":1,"windowDimensions":{"x":0,"y":23,"width":1366,"height":741,"maximized":true},"grammars":{"deserializer":"GrammarRegistry","grammarOverridesByPath":{}},"project":{"paths":["/Users/ustrajunior/code/nextbit/superwifidashboard"],"buffers":[{"text":"class GraphsController < ApplicationController\n  before_action :set_graph, only: [:show, :edit, :update, :destroy]\n\n  def index\n    @graphs = Graph.all\n  end\n\n  def show\n  end\n\n  def new\n    @graph = Graph.new\n  end\n\n  def edit\n  end\n\n  def create\n    @graph = Graph.new(graph_params)\n\n    respond_to do |format|\n      if @graph.save\n        format.html { redirect_to @graph, notice: 'Graph was successfully created.' }\n        format.json { render :show, status: :created, location: @graph }\n      else\n        format.html { render :new }\n        format.json { render json: @graph.errors, status: :unprocessable_entity }\n      end\n    end\n  end\n\n  def update\n    respond_to do |format|\n      if @graph.update(graph_params)\n        format.html { redirect_to @graph, notice: 'Graph was successfully updated.' }\n        format.json { render :show, status: :ok, location: @graph }\n      else\n        format.html { render :edit }\n        format.json { render json: @graph.errors, status: :unprocessable_entity }\n      end\n    end\n  end\n\n  def destroy\n    @graph.destroy\n    respond_to do |format|\n      format.html { redirect_to graphs_url, notice: 'Graph was successfully destroyed.' }\n      format.json { head :no_content }\n    end\n  end\n\n  def visits\n    client_ids = params[:client]\n    @graph_visits_by_day =  Graph.visits_by_day(7.days.ago.to_date, client_ids: client_ids)\n    @graph_visits_by_month = Graph.visits_by_month(3.months.ago.to_date.month, client_ids: client_ids)\n    @graph_visit_by_gender_by_day = Graph.visits_by_gender_by_day(7.days.ago.to_date, client_ids: client_ids)\n  end\n\n  def returning\n    client_ids = params[:client]\n    @graph_returning_by_day =  Graph.returning_by_day(7.days.ago.to_date, client_ids: client_ids)\n    @graph_returning_by_month = Graph.returning_by_month(3.months.ago.to_date.month, client_ids: client_ids)\n  end\n\n  def presence\n    @presence_by_ap = Graph.presence_by_ap\n    @presences = Graph.presences\n    @network_usage_time = Graph.network_usage_time\n  end\n\n  def associations\n    client_ids = params[:client]\n    @graph_associated_users = Graph.graph_associated_users(client_ids: client_ids)\n    @graph_association_by_day = Graph.graph_association_by_day(7.days.ago.to_date, client_ids: client_ids)\n    @graph_association_by_month = Graph.graph_association_by_month(3.months.ago.to_date.month, client_ids: client_ids)\n    @graph_association_by_day_by_gender = Graph.graph_association_by_day_by_gender(7.days.ago.to_date, client_ids: client_ids)\n    @last_ten_associated_users = Graph.last_ten_associated_users(client_ids: client_ids)\n    @graph_association_by_month_by_gender = Graph.graph_association_by_month_by_gender(3.months.ago.to_date.month, client_id: client_ids)\n  end\n\n  def registrations\n    client_ids = params[:client]\n    @total_users = Graph.total_users(client_ids: client_ids)\n    @graph_registration_by_day = Graph.graph_registration_by_day(7.days.ago.to_date, client_ids: client_ids)\n    @graph_registration_by_month = Graph.graph_registration_by_month(3.months.ago.to_date.month, client_ids: client_ids)\n    @graph_registration_by_day_by_gender = Graph.graph_registration_by_day_by_gender(7.days.ago.to_date, client_ids: client_ids)\n    @last_ten_users_registered = User.select(\"email, gender, age, phone, accept_email, accept_sms, users.created_at\").joins(:client_users).where(\"client_id in (?)\", client_ids).limit(10).order('users.created_at desc')\n  end\n\n  def visits_by_day\n    from = params[:from]\n    to = params[:to]\n    @visits_by_day =  Graph.visits_by_day(from.to_date.strftime(\"%Y-%m-%d\"), to.to_date.strftime(\"%Y-%m-%d\"))\n  end\n\n  def visits_by_month\n    from = params[:from]\n    to = params[:to]\n    @visits_by_month =  Graph.visits_by_month(from.to_date.strftime(\"%Y-%m-%d\"), to.to_date.strftime(\"%Y-%m-%d\"))\n  end\n\n  def visits_by_hour\n    date1 = params[:date1]\n    date2 = params[:date2]\n    @visits_by_hour =  Graph.visits_by_hour(date1.to_date.strftime(\"%Y-%m-%d\"), date2.to_date.strftime(\"%Y-%m-%d\"))\n  end\n\n\n  private\n    # Use callbacks to share common setup or constraints between actions.\n    def set_graph\n      @graph = Graph.find(params[:id])\n    end\n\n    # Never trust parameters from the scary internet, only allow the white list through.\n    def graph_params\n      params.require(:graph).permit(:name, :url, :height, :width, :columns, :client)\n    end\nend\n","markers":{"markers":{"1":{"id":1,"range":[[63,0],[63,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":861,"goalScreenRange":null,"clip":"forward","autoscroll":true,"preserveFolds":true},"deserializer":"Marker"},"47":{"id":47,"range":[[58,0],[58,0]],"tailed":true,"reversed":false,"valid":false,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"203":{"id":203,"range":[[58,0],[58,0]],"tailed":true,"reversed":false,"valid":false,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"207":{"id":207,"range":[[63,0],[63,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History","version":1},"encoding":"utf8","filePath":"/Users/ustrajunior/code/nextbit/superwifidashboard/app/controllers/graphs_controller.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"d0b7dfcd959d65ad1acabda1f8ef26be6587ee55","deserializer":"TextBuffer"},{"text":"Rails.application.routes.draw do\n\n  if Rails.env.development?\n    mount LetterOpenerWeb::Engine, at: \"/letter_opener\"\n  end\n\n  devise_for :admins\n\n  resources :graphs do\n    get :visits, on: :collection\n    get :returning, on: :collection\n    get :presence, on: :collection\n    get :associations, on: :collection\n    get :registrations, on: :collection\n\n    post :visits_by_hour, on: :collection\n    post :visits_by_day, on: :collection\n    post :visits_by_month, on: :collection\n  end\n\n  resources :graph_filters do\n    post :associations_by_month, on: :collection\n  end\n\n  resources :banners\n  resources :dashboard\n  resources :admins\n  resources :client_aps\n  resources :clients\n\n  root \"dashboard#index\"\nend\n","markers":{"markers":{"1":{"id":1,"range":[[8,18],[8,18]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":869,"goalScreenRange":null,"preserveFolds":true},"deserializer":"Marker"},"6":{"id":6,"range":[[8,0],[8,0]],"tailed":true,"reversed":false,"valid":false,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"12":{"id":12,"range":[[8,0],[8,0]],"tailed":true,"reversed":false,"valid":false,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"14":{"id":14,"range":[[8,0],[8,0]],"tailed":true,"reversed":false,"valid":false,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History","version":1},"encoding":"utf8","filePath":"/Users/ustrajunior/code/nextbit/superwifidashboard/config/routes.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"aef77fe0459777bf7c803f9c3d4075bf58a1d0ae","deserializer":"TextBuffer"},{"text":"class Graph < ActiveRecord::Base\n  # gráficos user / association\n\n  def self.graph_associated_users(options={})\n    total = by_client_or_group(AssociatedUser, options).select(\"id, SUM(total) AS 'total', SUM(male) AS 'male', SUM(female) AS 'female', SUM(nselected) AS 'nselected'\").first\n    data = [\n      {\n        value: total.male,\n        color:\"#A2BDF9\",\n        highlight: \"#fac342\",\n        label: \"Homens\"\n      },\n      {\n        value: total.female,\n        color:\"#FFB8E3\",\n        highlight: \"#FFC870\",\n        label: \"Mulheres\"\n      },\n      {\n        value: total.nselected,\n        color:\"#D1D1D1\",\n        highlight: \"#FFC870\",\n        label: \"Não selecionado\"\n      }\n    ]\n    data.to_json\n  end\n\n  def self.graph_association_by_day(date_filter, options={})\n    total = by_client_or_group(AssociationHotspot, options).select(\"id, COUNT(id) as 'total', date, client_id\")\n                                .group(\"DATE(date)\").where(\"date >= ?\", date_filter)\n    datasets = [\n      {\n        label: 'Total',\n        fillColor: \"rgba(217,115,0,0.5)\",\n        strokeColor: \"rgba(217,115,0,1)\",\n        pointColor: \"rgba(217,115,0,1)\",\n        pointStrokeColor: \"#fff\",\n        pointHighlightFill: \"#fff\",\n        pointHighlightStroke: \"rgba(217,115,0,1)\",\n        data: total.map{ |d| d.total }\n      }\n    ]\n    data = {\n      labels: total.map{ |d| I18n.l(d.date.to_date, format: :default) },\n      datasets: datasets\n    }\n    data.to_json\n  end\n\n  def self.graph_association_by_month(date_filter, options={})\n    total = by_client_or_group(AssociationHotspot, options).select(\"id, COUNT(id) as 'total', MONTH(date) as 'month', client_id\").\n                              group(\"MONTH(date)\").where(\"MONTH(date) >= ?\", date_filter)\n    datasets = [\n      {\n        label: 'Total',\n        fillColor: \"rgba(92,117,46,0.4)\",\n        strokeColor: \"rgba(92,117,46,1)\",\n        pointColor: \"rgba(92,117,46,1)\",\n        pointStrokeColor: \"#fff\",\n        pointHighlightFill: \"#fff\",\n        pointHighlightStroke: \"rgba(92,117,46,1)\",\n        data: total.map{ |d| d.total }\n      }\n    ]\n    data = {\n      labels: total.map{ |d| (I18n.t :abbr_month_names, :scope => :date)[d.month]},\n      datasets: datasets\n    }\n    data.to_json\n  end\n\n  def self.graph_association_by_day_by_gender(date_filter, options={})\n    total = by_client_or_group(AssociatedUser, options).select(\"id,  SUM(male) as 'male', SUM(female) as 'female', SUM(nselected) as 'nselected', date\").\n                        group(\"DATE(date)\").where(\"date >= ?\", date_filter)\n    datasets = [\n      {\n        label: 'Homens',\n        fillColor: \"rgba(162,189,249,0.4)\",\n        strokeColor: \"rgba(162,189,249,1)\",\n        pointColor: \"rgba(162,189,249,1)\",\n        pointStrokeColor: \"#fff\",\n        pointHighlightFill: \"#fff\",\n        pointHighlightStroke: \"rgba(162,189,249,1)\",\n        data: total.map{ |d| d.male }\n      },\n      {\n        label: 'Mulheres',\n        fillColor: \"rgba(255,184,227,0.4)\",\n        strokeColor: \"rgba(255,184,227,1)\",\n        pointColor: \"rgba(255,184,227,1)\",\n        pointStrokeColor: \"#fff\",\n        pointHighlightFill: \"#fff\",\n        pointHighlightStroke: \"rgba(255,184,227,1)\",\n        data: total.map{ |d| d.female }\n      },\n      {\n        label: 'Não Declarado',\n        fillColor: \"rgba(209,209,209,0.4)\",\n        strokeColor: \"rgba(209,209,209,1)\",\n        pointColor: \"rgba(209,209,209,1)\",\n        pointStrokeColor: \"#fff\",\n        pointHighlightFill: \"#fff\",\n        pointHighlightStroke: \"rgba(209,209,209,1)\",\n        data: total.map{ |d| d.nselected }\n      }\n    ]\n    data = {\n      labels: total.map{ |d| I18n.l(d.date.to_date, format: :default) },\n      datasets: datasets\n    }\n    data.to_json\n  end\n\n  def self.graph_association_by_month_by_gender(date_filter, options={})\n    total = by_client_or_group(AssociatedUser, options).select(\"id,  SUM(male) as 'male', SUM(female) as 'female', SUM(nselected) as 'nselected', MONTH(date) as 'month'\").\n                                      group(\"MONTH(date)\").where(\"MONTH(date) >= ?\", date_filter)\n    datasets = [\n      {\n        label: 'Homens',\n        fillColor: \"rgba(162,189,249,0.4)\",\n        strokeColor: \"rgba(162,189,249,1)\",\n        pointColor: \"rgba(162,189,249,1)\",\n        pointStrokeColor: \"#fff\",\n        pointHighlightFill: \"#fff\",\n        pointHighlightStroke: \"rgba(162,189,249,1)\",\n        data: total.map{ |d| d.male }\n      },\n      {\n        label: 'Mulheres',\n        fillColor: \"rgba(255,184,227,0.4)\",\n        strokeColor: \"rgba(255,184,227,1)\",\n        pointColor: \"rgba(255,184,227,1)\",\n        pointStrokeColor: \"#fff\",\n        pointHighlightFill: \"#fff\",\n        pointHighlightStroke: \"rgba(255,184,227,1)\",\n        data: total.map{ |d| d.female }\n      },\n      {\n        label: 'Não Declarado',\n        fillColor: \"rgba(209,209,209,0.4)\",\n        strokeColor: \"rgba(209,209,209,1)\",\n        pointColor: \"rgba(209,209,209,1)\",\n        pointStrokeColor: \"#fff\",\n        pointHighlightFill: \"#fff\",\n        pointHighlightStroke: \"rgba(209,209,209,1)\",\n        data: total.map{ |d| d.nselected }\n      }\n    ]\n    data = {\n      labels: total.map{ |d| (I18n.t :abbr_month_names, :scope => :date)[d.month] },\n      datasets: datasets\n    }\n    data.to_json\n  end\n\n#Fim gráficos user / registration\n\n# gráficos user / registration\n\n  def self.total_users(options={})\n    total = by_client_or_group(GraphUser, options).select(\"id, SUM(total) AS 'total', SUM(male) AS 'male', SUM(female) AS 'female', SUM(nselected) AS 'nselected'\").first\n    data = [\n      {\n        value: total.male,\n        color:\"#A2BDF9\",\n        highlight: \"#fac342\",\n        label: \"Homens\"\n      },\n      {\n        value: total.female,\n        color:\"#FFB8E3\",\n        highlight: \"#FFC870\",\n        label: \"Mulheres\"\n      },\n      {\n        value: total.nselected,\n        color:\"#D1D1D1\",\n        highlight: \"#FFC870\",\n        label: \"Não selecionado\"\n      }\n    ]\n    data.to_json\n  end\n\n  def self.graph_registration_by_day(date_filter, options={})\n    total = by_client_or_group(RegistrationByDay, options).select(\"id, SUM(total) as 'total', date, client_id\").group(\"DATE(date)\").where(\"date >= ?\", date_filter)\n    datasets = [\n      {\n        label: 'Total',\n        fillColor: \"rgba(217,115,0,0.5)\",\n        strokeColor: \"rgba(217,115,0,1)\",\n        pointColor: \"rgba(217,115,0,1)\",\n        pointStrokeColor: \"#fff\",\n        pointHighlightFill: \"#fff\",\n        pointHighlightStroke: \"rgba(217,115,0,1)\",\n        data: total.map{ |d| d.total }\n      }\n    ]\n    data = {\n      labels: total.map{ |d| I18n.l(d.date.to_date, format: :default) },\n      datasets: datasets\n    }\n    data.to_json\n  end\n\n  def self.graph_registration_by_month(date_filter, options={})\n    total = by_client_or_group(RegistrationByMonth, options).select(\"id, SUM(total) as 'total', month, client_id\").group(:month).where(\"month >= ?\", date_filter)\n    datasets = [\n      {\n        label: 'Total',\n        fillColor: \"rgba(92,117,46,0.4)\",\n        strokeColor: \"rgba(92,117,46,1)\",\n        pointColor: \"rgba(92,117,46,1)\",\n        pointStrokeColor: \"#fff\",\n        pointHighlightFill: \"#fff\",\n        pointHighlightStroke: \"rgba(92,117,46,1)\",\n        data: total.map{ |d| d.total }\n      }\n    ]\n    data = {\n      labels: total.map{ |d| (I18n.t :abbr_month_names, :scope => :date)[d.month]},\n      datasets: datasets\n    }\n    data.to_json\n  end\n\n  def self.graph_registration_by_day_by_gender(date_filter, options={})\n    total = by_client_or_group(GraphUser, options).select(\"id, SUM(total), male, female, nselected, date\").group(\"DATE(date)\").where(\"date >= ?\", date_filter)\n    datasets = [\n      {\n        label: 'Homens',\n        fillColor: \"rgba(162,189,249,0.4)\",\n        strokeColor: \"rgba(162,189,249,1)\",\n        pointColor: \"rgba(162,189,249,1)\",\n        pointStrokeColor: \"#fff\",\n        pointHighlightFill: \"#fff\",\n        pointHighlightStroke: \"rgba(162,189,249,1)\",\n        data: total.map{ |d| d.male }\n      },\n      {\n        label: 'Mulheres',\n        fillColor: \"rgba(255,184,227,0.4)\",\n        strokeColor: \"rgba(255,184,227,1)\",\n        pointColor: \"rgba(255,184,227,1)\",\n        pointStrokeColor: \"#fff\",\n        pointHighlightFill: \"#fff\",\n        pointHighlightStroke: \"rgba(255,184,227,1)\",\n        data: total.map{ |d| d.female }\n      },\n      {\n        label: 'Não Declarado',\n        fillColor: \"rgba(209,209,209,0.4)\",\n        strokeColor: \"rgba(209,209,209,1)\",\n        pointColor: \"rgba(209,209,209,1)\",\n        pointStrokeColor: \"#fff\",\n        pointHighlightFill: \"#fff\",\n        pointHighlightStroke: \"rgba(209,209,209,1)\",\n        data: total.map{ |d| d.nselected }\n      }\n    ]\n    data = {\n      labels: total.map{ |d| I18n.l(d.date.to_date, format: :default) },\n      datasets: datasets\n    }\n    data.to_json\n  end\n\n#Fim gráficos user / registration\n\n# gráfico visitas\n\n  def self.visits_by_day(date_filter, options={})\n    total = by_client_or_group(VisitByDay, options).select(\"id, SUM(total) as 'total', date\").group(\"DATE(date)\").where(\"date >= ?\", date_filter)\n    datasets = [\n      {\n        label: 'Total',\n        fillColor: \"rgba(56,103,250,0.4)\",\n        strokeColor: \"rgba(56,103,250,1)\",\n        pointColor: \"rgba(56,103,250,1)\",\n        pointStrokeColor: \"#fff\",\n        pointHighlightFill: \"#fff\",\n        pointHighlightStroke: \"rgba(56,103,250,1)\",\n        data: total.map{ |d| d.total }\n      }\n    ]\n    data = {\n      labels: total.map{ |d| I18n.l(d.date.to_date, format: :default) },\n      datasets: datasets\n    }\n    data.to_json\n  end\n\n  def self.hour_string(v)\n    v.strftime(\"%H:00\")\n  end\n\n  def self.visits_by_month(date_filter, options={})\n\n    total = by_client_or_group(VisitByMonth, options).select(\"id, SUM(total) as 'total', month\").group(\"MONTH(month)\").where(\"month >= ?\", date_filter)\n\n    datasets = [\n      {\n        label: 'Total',\n        fillColor: \"rgba(208,207,0,0.4)\",\n        strokeColor: \"rgba(208,207,0,1)\",\n        pointColor: \"rgba(208,207,0,1)\",\n        pointStrokeColor: \"#fff\",\n        pointHighlightFill: \"#fff\",\n        pointHighlightStroke: \"rgba(208,207,0,1)\",\n        data: total.map{ |d| d.total }\n      }\n    ]\n    data = {\n      labels: total.map{ |d| (I18n.t :abbr_month_names, :scope => :date)[d.month.to_date.month] },\n      datasets: datasets\n    }\n    data.to_json\n  end\n\n  def self.visits_by_gender_by_day(date_filter, options={})\n\n    total = by_client_or_group(VisitByGenderByDay, options).\n                              select(\"id, SUM(male) as 'male', SUM(female) as 'female', SUM(nselected) as 'nselected', date, client_id\").\n                              group(\"DATE(date)\").where(\"date >= ?\", date_filter)\n\n    datasets = [\n      {\n        label: 'Homens',\n        fillColor: \"rgba(162,189,249,0.4)\",\n        strokeColor: \"rgba(162,189,249,1)\",\n        pointColor: \"rgba(162,189,249,1)\",\n        pointStrokeColor: \"#fff\",\n        pointHighlightFill: \"#fff\",\n        pointHighlightStroke: \"rgba(162,189,249,1)\",\n        data: total.map{ |d| d.male }\n      },\n      {\n        label: 'Mulheres',\n        fillColor: \"rgba(255,184,227,0.4)\",\n        strokeColor: \"rgba(255,184,227,1)\",\n        pointColor: \"rgba(255,184,227,1)\",\n        pointStrokeColor: \"#fff\",\n        pointHighlightFill: \"#fff\",\n        pointHighlightStroke: \"rgba(255,184,227,1)\",\n        data: total.map{ |d| d.female }\n      },\n      {\n        label: 'Não Declarado',\n        fillColor: \"rgba(209,209,209,0.4)\",\n        strokeColor: \"rgba(209,209,209,1)\",\n        pointColor: \"rgba(209,209,209,1)\",\n        pointStrokeColor: \"#fff\",\n        pointHighlightFill: \"#fff\",\n        pointHighlightStroke: \"rgba(209,209,209,1)\",\n        data: total.map{ |d| d.nselected }\n      }\n    ]\n    data = {\n      labels: total.map{ |d| I18n.l(d.date.to_date, format: :default) },\n      datasets: datasets\n    }\n    data.to_json\n  end\n\n# Fim gráficos visitas\n\n# Gráficos retorno\n\n  def self.returning_by_day(date_filter, options={})\n    total = by_client_or_group(ReturningVisitorByDay, options).\n                                select(\"id, SUM(total) as 'total', SUM(new_users) as 'new_users', SUM(returning_users) as 'returning_users', date\").\n                                group(\"DATE(date)\").where(\"date >= ?\", date_filter)\n\n    datasets = [\n      {\n        label: 'Usuários retornando',\n        fillColor: \"rgba(151,187,205,0.4)\",\n        strokeColor: \"rgba(151,187,205,1)\",\n        pointColor: \"rgba(151,187,205,1)\",\n        pointStrokeColor: \"#fff\",\n        pointHighlightFill: \"#fff\",\n        pointHighlightStroke: \"rgba(151,187,205,1)\",\n        data: total.map{ |d| d.returning_users }\n      },\n      {\n        label: 'Novos usuários',\n        fillColor: \"rgba(0,200,0,0.4)\",\n        strokeColor: \"rgba(0,200,0,1)\",\n        pointColor: \"rgba(0,200,0,1)\",\n        pointStrokeColor: \"#fff\",\n        pointHighlightFill: \"#fff\",\n        pointHighlightStroke: \"rgba(0,200,0,1)\",\n        data: total.map{ |d| d.new_users }\n      }\n    ]\n    data = {\n      labels: total.map{ |d| I18n.l(d.date.to_date, format: :default) },\n      datasets: datasets\n    }\n    data.to_json\n\n  end\n\n  def self.returning_by_month(date_filter, options={})\n    total = by_client_or_group(ReturningVisitorByMonth, options).\n                                select(\"id, SUM(total) as 'total', SUM(new_users) as 'new_users', SUM(returning_users) as 'returning_users', month\").\n                                group(\"MONTH(month)\").where(\"month >= ?\", date_filter)\n    datasets = [\n      {\n        label: 'Novos usuários',\n        fillColor: \"rgba(151,187,205,0.4)\",\n        strokeColor: \"rgba(151,187,205,1)\",\n        pointColor: \"rgba(151,187,205,1)\",\n        pointStrokeColor: \"#fff\",\n        pointHighlightFill: \"#fff\",\n        pointHighlightStroke: \"rgba(151,187,205,1)\",\n        data: total.map{ |d| d.new_users }\n      },\n      {\n        label: 'Usuários retornando',\n        fillColor: \"rgba(0,200,0,0.4)\",\n        strokeColor: \"rgba(0,200,0,1)\",\n        pointColor: \"rgba(0,200,0,1)\",\n        pointStrokeColor: \"#fff\",\n        pointHighlightFill: \"#fff\",\n        pointHighlightStroke: \"rgba(0,200,0,1)\",\n        data: total.map{ |d| d.returning_users }\n      }\n    ]\n    data = {\n      labels: total.map{ |d| (I18n.t :abbr_month_names, :scope => :date)[d.month.to_date.month] },\n      datasets: datasets\n    }\n    data.to_json\n  end\n\n# Fim gráficos retorno\n\n# Graph Users\n  def self.last_ten_associated_users(options={})\n    total = by_client_or_group(ClientUser, options).select(\"users.id, gender, age, accept_email, accept_sms, client_users.created_at\").\n                                joins(:user).limit(10).order('client_users.created_at desc')\n  end\n\n  \n  private\n\n  def self.by_client_or_group(klass, options)\n    if options[:client_ids].present?\n      klass.by_client_ids(options[:client_ids])\n    elsif options[:client_id].present?\n      klass.by_client(options[:client_id])\n    else\n      klass.all\n    end\n  end\nend\n\n\n\n### TODO: codigos para filtros futuros\n\n#def self.visits_by_hour(date1, date2)\n    #total = GraphVisit.where(\"(day >= :date1beginning AND day < :date1end) OR (day >= :date2beginning AND day < :date2end)\",date1beginning: date1.to_date.beginning_of_day, date1end: date1.to_date.end_of_day, date2beginning: date2.to_date.beginning_of_day, date2end: date2.to_date.end_of_day).group_by_hour.SUM(:total)\n\n    # values = [\n    #   {hour: \"00:00\", total: 0},\n    #   {hour: \"01:00\", total: 0},\n    #   {hour: \"02:00\", total: 0},\n    #   {hour: \"03:00\", total: 0},\n    #   {hour: \"04:00\", total: 0},\n    #   {hour: \"05:00\", total: 0},\n    #   {hour: \"06:00\", total: 0},\n    #   {hour: \"07:00\", total: 0},\n    #   {hour: \"08:00\", total: 0},\n    #   {hour: \"09:00\", total: 0},\n    #   {hour: \"11:00\", total: 0},\n    #   {hour: \"12:00\", total: 0},\n    #   {hour: \"13:00\", total: 0},\n    #   {hour: \"14:00\", total: 0},\n    #   {hour: \"15:00\", total: 0},\n    #   {hour: \"16:00\", total: 0},\n    #   {hour: \"17:00\", total: 0},\n    #   {hour: \"18:00\", total: 0},\n    #   {hour: \"19:00\", total: 0},\n    #   {hour: \"20:00\", total: 0},\n    #   {hour: \"21:00\", total: 0},\n    #   {hour: \"22:00\", total: 0},\n    #   {hour: \"23:00\", total: 0}\n    # ]\n\n    # new_hash = {}\n    # total.map do |key, value|\n    #   new_hash[hour_string(key)] = value\n    # end\n\n    # final = []\n\n    # values.each do |h|\n    #   hour = h[:hour]\n    #   if new_hash[hour]\n    #     final << { hour: hour, total: new_hash[hour] }\n    #   else\n    #     final << { hour: hour, total: 0 }\n    #   end\n    # end\n\n\n    # puts \"==============VALUES===================\"\n    # puts final\n    # puts \"======================================\"\n  #end\n\n  # def self.presences\n  #   total = GraphPresence.select(\"SUM(seen) as seen, SUM(associated) as associated\").first\n  #   data = [\n  #     {\n  #       value: total.seen,\n  #       color:\"#FDB45C\",\n  #       highlight: \"#FFC870\",\n  #       label: \"Vistos\"\n  #   },\n  #   {\n  #       value: total.associated,\n  #       color:\"#46BFBD\",\n  #       highlight: \"#5AD3D1\",\n  #       label: \"Associados\"\n  #   }]\n  #   data.to_json\n  # end\n\n  # def self.presence_by_ap\n  #   total = GraphPresence.select(\"ap_mac, SUM(seen) as seen, SUM(associated) as associated\").group(\"ap_mac\")\n  #   datasets = [\n  #     {\n  #       fillColor: \"rgba(151,187,205,0.5)\",\n  #       strokeColor: \"rgba(151,187,205,0.8)\",\n  #       highlightFill: \"rgba(151,187,205,0.75)\",\n  #       highlightStroke: \"rgba(151,187,205,1)\",\n  #       data: total.map(&:seen)\n  #     },\n  #     {\n  #       fillColor: \"rgba(0, 105, 26, 0.5)\",\n  #       strokeColor: \"rgba(0, 105, 26,0.8)\",\n  #       highlightFill: \"rgba(0, 105, 26,0.75)\",\n  #       highlightStroke: \"rgba(0, 105, 26,1)\",\n  #       data: total.map(&:associated)\n  #     }\n  #   ]\n\n  #   data = {\n  #     labels: total.map(&:ap_mac),\n  #     datasets: datasets\n  #   }\n  #   data.to_json\n  # end\n\n  # def self.network_usage_time\n  #   total = GraphNetworkUsage.select(\"DAYOFWEEK(day) as day, SUM(total) as total, SUM(average) as average\").group(\"DAYOFWEEK(day)\")\n  #   datasets = [\n  #     {\n  #       fillColor: \"rgba(220,220,220,0.2)\",\n  #       strokeColor: \"rgba(220,220,220,1)\",\n  #       pointColor: \"rgba(220,220,220,1)\",\n  #       pointStrokeColor: \"#fff\",\n  #       pointHighlightFill: \"#fff\",\n  #       pointHighlightStroke: \"rgba(220,220,220,1)\",\n  #       data: total.map{ |d| d.total }\n  #     },\n  #     {\n  #       fillColor: \"rgba(151,187,205,0.2)\",\n  #       strokeColor: \"rgba(151,187,205,1)\",\n  #       pointColor: \"rgba(151,187,205,1)\",\n  #       pointStrokeColor: \"#fff\",\n  #       pointHighlightFill: \"#fff\",\n  #       pointHighlightStroke: \"rgba(151,187,205,1)\",\n  #       data: total.map{ |d| d.average }\n  #     }\n  #   ]\n\n  #   data = {\n  #     labels: total.map{ |d| Date::DAYNAMES[d.day] },\n  #     datasets: datasets\n  #   }\n  #   data.to_json\n  # end\n","markers":{"markers":{"1":{"id":1,"range":[[120,36],[120,36]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":893,"goalScreenRange":null,"preserveFolds":true},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History","version":1},"encoding":"utf8","filePath":"/Users/ustrajunior/code/nextbit/superwifidashboard/app/models/graph.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"c2a428a74e04a6d809649125d335ab9e3591b76e","deserializer":"TextBuffer"},{"text":"<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>freeboard</title>\n\t<meta name=\"mobile-web-app-capable\" content=\"yes\">\n    <meta name=\"apple-mobile-web-app-capable\" content=\"yes\" />\n    <meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black\" />\n    <meta name=\"viewport\" content = \"width = device-width, initial-scale = 1, user-scalable = no\" />\n    <link href=\"css/freeboard.min.css\" rel=\"stylesheet\" />\n    <script src=\"js/freeboard.thirdparty.min.js\"></script>\n    <script type=\"text/javascript\">\n        head.js(\"js/freeboard+plugins.min.js\",\n                \"js/freeboard-jqplot.js\",\n                \"js/spark.js\",\n                // *** Load more plugins here ***\n                function(){\n                    $(function()\n                    { //DOM Ready\n                        freeboard.initialize(true);\n\n                        var hashpattern = window.location.hash.match(/(&|#)source=([^&]+)/);\n                        if (hashpattern !== null) {\n                            $.getJSON(hashpattern[2], function(data) {\n                                freeboard.loadDashboard(data, function() {\n                                    freeboard.setEditing(false);\n                                });\n                            });\n                        }\n\n                    });\n                });\n    </script>\n</head>\n<body>\n<div id=\"board-content\">\n    <img id=\"dash-logo\" data-bind=\"attr:{src: header_image}, visible:header_image()\">\n    <div class=\"gridster responsive-column-width\">\n        <ul data-bind=\"grid: true\">\n        </ul>\n    </div>\n</div>\n<header id=\"main-header\" data-bind=\"if:allow_edit\">\n    <div id=\"admin-bar\">\n        <div id=\"admin-menu\">\n            <div id=\"board-tools\">\n                <h1 id=\"board-logo\" class=\"title bordered\">freeboard</h1>\n                <div id=\"board-actions\">\n                    <ul class=\"board-toolbar vertical\">\n                        <li data-bind=\"click: loadDashboardFromLocalFile\"><i id=\"full-screen-icon\" class=\"icon-folder-open icon-white\"></i><label id=\"full-screen\">Load Freeboard</label></li>\n                        <li data-bind=\"click: saveDashboard\"><i class=\"icon-download-alt icon-white\"></i><label>Save Freeboard</label></li>\n                        <li id=\"add-pane\" data-bind=\"click: createPane\"><i class=\"icon-plus icon-white\"></i><label>Add Pane</label></li>\n                    </ul>\n                </div>\n            </div>\n            <div id=\"datasources\">\n                <h2 class=\"title\">DATASOURCES</h2>\n\n                <div class=\"datasource-list-container\">\n                    <table class=\"table table-condensed sub-table\" id=\"datasources-list\" data-bind=\"if: datasources().length\">\n                        <thead>\n                        <tr>\n                            <th>Name</th>\n                            <th>Last Updated</th>\n                            <th>&nbsp;</th>\n                        </tr>\n                        </thead>\n                        <tbody data-bind=\"foreach: datasources\">\n                        <tr>\n                            <td>\n                                <span class=\"text-button datasource-name\" data-bind=\"text: name, pluginEditor: {operation: 'edit', type: 'datasource'}\"></span>\n                            </td>\n                            <td data-bind=\"text: last_updated\"></td>\n                            <td>\n                                <ul class=\"board-toolbar\">\n                                    <li data-bind=\"click: updateNow\"><i class=\"icon-refresh icon-white\"></i></li>\n                                    <li data-bind=\"pluginEditor: {operation: 'delete', type: 'datasource'}\">\n                                        <i class=\"icon-trash icon-white\"></i></li>\n                                </ul>\n                            </td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </div>\n                <span class=\"text-button table-operation\" data-bind=\"pluginEditor: {operation: 'add', type: 'datasource'}\">ADD</span>\n            </div>\n        </div>\n    </div>\n\t<div id=\"column-tools\" class=\"responsive-column-width\">\n\t\t<ul class=\"board-toolbar left-columns\">\n\t\t\t<li class=\"column-tool add\" data-bind=\"click: addGridColumnLeft\"><span class=\"column-icon right\"></span><i class=\"icon-arrow-left icon-white\"></i></li>\n\t\t\t<li class=\"column-tool sub\" data-bind=\"click: subGridColumnLeft\"><span class=\"column-icon left\"></span><i class=\"icon-arrow-right icon-white\"></i></li>\n\t\t</ul>\n\t\t<ul class=\"board-toolbar right-columns\">\n\t\t\t<li class=\"column-tool sub\" data-bind=\"click: subGridColumnRight\"><span class=\"column-icon right\"></span><i class=\"icon-arrow-left icon-white\"></i></li>\n\t\t\t<li class=\"column-tool add\" data-bind=\"click: addGridColumnRight\"><span class=\"column-icon left\"></span><i class=\"icon-arrow-right icon-white\"></i></li>\n\t\t</ul>\n\t</div>\n    <div id=\"toggle-header\" data-bind=\"click: toggleEditing\">\n        <i id=\"toggle-header-icon\" class=\"icon-wrench icon-white\"></i></div>\n</header>\n\n<div style=\"display:hidden\">\n    <ul data-bind=\"template: { name: 'pane-template', foreach: panes}\">\n    </ul>\n</div>\n\n<script type=\"text/html\" id=\"pane-template\">\n    <li data-bind=\"pane: true\">\n        <header>\n            <h1 data-bind=\"text: title\"></h1>\n            <ul class=\"board-toolbar pane-tools\">\n                <li data-bind=\"pluginEditor: {operation: 'add', type: 'widget'}\">\n                    <i class=\"icon-plus icon-white\"></i>\n                </li>\n                <li data-bind=\"pluginEditor: {operation: 'edit', type: 'pane'}\">\n                    <i class=\"icon-wrench icon-white\"></i>\n                </li>\n                <li data-bind=\"pluginEditor: {operation: 'delete', type: 'pane'}\">\n                    <i class=\"icon-trash icon-white\"></i>\n                </li>\n            </ul>\n        </header>\n        <section data-bind=\"foreach: widgets\">\n            <div class=\"sub-section\" data-bind=\"css: 'sub-section-height-' + height()\">\n                <div class=\"widget\" data-bind=\"widget: true, css:{fillsize:fillSize}\"></div>\n                <div class=\"sub-section-tools\">\n                    <ul class=\"board-toolbar\">\n                        <!-- ko if:$parent.widgetCanMoveUp($data) -->\n                        <li data-bind=\"click:$parent.moveWidgetUp\"><i class=\"icon-chevron-up icon-white\"></i></li>\n                        <!-- /ko -->\n                        <!-- ko if:$parent.widgetCanMoveDown($data) -->\n                        <li data-bind=\"click:$parent.moveWidgetDown\"><i class=\"icon-chevron-down icon-white\"></i></li>\n                        <!-- /ko -->\n                        <li data-bind=\"pluginEditor: {operation: 'edit', type: 'widget'}\"><i class=\"icon-wrench icon-white\"></i></li>\n                        <li data-bind=\"pluginEditor: {operation: 'delete', type: 'widget'}\"><i class=\"icon-trash icon-white\"></i></li>\n                    </ul>\n                </div>\n            </div>\n        </section>\n    </li>\n</script>\n\n</body>\n</html>\n","markers":{"markers":{"1":{"id":1,"range":[[14,25],[14,25]],"tailed":false,"reversed":true,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":949,"goalScreenRange":null,"preserveFolds":true},"deserializer":"Marker"},"3":{"id":3,"range":[[13,16],[13,39]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History","version":1},"encoding":"utf8","filePath":"/Users/ustrajunior/Downloads/freeboard-master/index.html","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"168d5929b477a9575275ca89dd4ab720b6d3b354","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"id":3,"items":[{"id":861,"softTabs":true,"displayBuffer":{"id":862,"softWrapped":true,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/ustrajunior/code/nextbit/superwifidashboard/app/controllers/graphs_controller.rb","invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"TokenizedBuffer"},"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"deserializer":"SettingsView","version":2,"activePanelName":"Settings","uri":"atom://config"},{"id":893,"softTabs":true,"displayBuffer":{"id":894,"softWrapped":true,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/ustrajunior/code/nextbit/superwifidashboard/app/models/graph.rb","invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"TokenizedBuffer"},"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":949,"softTabs":true,"displayBuffer":{"id":950,"softWrapped":true,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/ustrajunior/Downloads/freeboard-master/index.html","invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"TokenizedBuffer"},"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":869,"softTabs":true,"displayBuffer":{"id":870,"softWrapped":true,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/ustrajunior/code/nextbit/superwifidashboard/config/routes.rb","invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"TokenizedBuffer"},"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"}],"activeItemURI":"/Users/ustrajunior/code/nextbit/superwifidashboard/app/controllers/graphs_controller.rb","focused":false,"flexScale":1,"deserializer":"Pane"},"activePaneId":3,"deserializer":"PaneContainer","version":1},"fullScreen":false,"packagesWithActiveGrammars":["language-ruby-on-rails","language-ruby","language-html","language-hyperlink","language-todo"],"deserializer":"Workspace"},"packageStates":{"find-and-replace":{"viewState":"","modelState":{"useRegex":false,"inCurrentSelection":false,"caseSensitive":false,"wholeWord":false},"projectViewState":"","resultsModelState":{"useRegex":false,"caseSensitive":false},"findHistory":["asset","total_users","registration","by_year","optionsPie","graph_registration_by_month","returning_by_day","returning","def returning","3.months","4.mon","visits_by_day","Date::","Date::M","Date::","I18n","FIX","visits_by_day","total_user","Bem-vindo","d.month","d.date","gender_icon","visits_by_day","graph_association_by_month_by_gender"],"replaceHistory":["http://bili.local"],"pathsHistory":["http://bili.local"]},"fuzzy-finder":{"/Users/ustrajunior/code/nextbit/superwifidashboard/app/controllers/graphs_controller.rb":1430830940048,"/Users/ustrajunior/code/nextbit/superwifidashboard/app/models/graph.rb":1430827982882,"/Users/ustrajunior/Downloads/freeboard-master/index.html":1430827652331,"/Users/ustrajunior/code/nextbit/superwifidashboard/config/routes.rb":1430825496886},"keybinding-resolver":{},"metrics":{"sessionLength":702843},"tree-view":{"directoryExpansionStates":{"/Users/ustrajunior/code/nextbit/superwifidashboard":{"isExpanded":true,"entries":{".git":{"isExpanded":false,"entries":{}},"app":{"isExpanded":false,"entries":{}},"bin":{"isExpanded":false,"entries":{}},"config":{"isExpanded":true,"entries":{"environments":{"isExpanded":false,"entries":{}},"initializers":{"isExpanded":false,"entries":{}},"locales":{"isExpanded":false,"entries":{}}}},"db":{"isExpanded":true,"entries":{"migrate":{"isExpanded":true,"entries":{}}}},"lib":{"isExpanded":false,"entries":{}},"log":{"isExpanded":false,"entries":{}},"public":{"isExpanded":false,"entries":{}},"spec":{"isExpanded":false,"entries":{}},"tmp":{"isExpanded":false,"entries":{}},"vendor":{"isExpanded":false,"entries":{}}}}},"selectedPath":"/Users/ustrajunior/code/nextbit/superwifidashboard/app","hasFocus":true,"attached":true,"scrollLeft":0,"scrollTop":503,"width":232}}}