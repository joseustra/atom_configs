{"mode":"editor","version":1,"windowDimensions":{"x":0,"y":23,"width":1366,"height":741,"maximized":true},"grammars":{"deserializer":"GrammarRegistry","grammarOverridesByPath":{}},"project":{"paths":["/Users/ustrajunior/code/go/src/code.nextbit.com.br/superwifi_api"],"buffers":[{"text":"package main\n\nimport (\n\t\"errors\"\n\t\"regexp\"\n\t\"time\"\n\n\t\"code.google.com/p/go-uuid/uuid\"\n\t\"code.nextbit.com.br/superwifi_api/utils\"\n\t\"github.com/jinzhu/gorm\"\n\t\"github.com/ustrajunior/authgo\"\n\n\tlog \"github.com/Sirupsen/logrus\"\n)\n\n// User - The user\ntype User struct {\n\tID                   int        `sql:\"unique\" gorm:\"column:id; primary_key:yes\"`\n\tSlug                 string     `json:\"uuid\"`\n\tName                 *string    `json:\"name,omitempty\"`\n\tUsername             string     `json:\"username,omitempty\" sql:\"not null;unique\"`\n\tEmail                string     `json:\"email,omitempty\" sql:\"not null;unique\"`\n\tBirthdateDay         int        `json:\"BirthdateDay,omitempty,string\"`\n\tBirthdateMonth       int        `json:\"BirthdateMonth,omitempty,string\"`\n\tBirthdateYear        int        `json:\"BirthdateYear,omitempty,string\"`\n\tGender               string     `json:\"gender,omitempty\"`\n\tPhone                string     `json:\"phone,omitempty\"`\n\tCpf                  *string    `json:\"cpf,omitempty\"`\n\tProvider             *string    `json:\"provider,omitempty\"`\n\tUID                  *string    `gorm:\"column:uid;\" json:\"uid,omitempty\"`\n\tAcceptEmail          *bool      `json:\"acceptEmail,bool,omitempty\"`\n\tAcceptSms            *bool      `json:\"acceptSms,bool,omitempty\"`\n\tDevices              []Device   `json:\"devices\" gorm:\"many2many:devices_users;\"`\n\tWelcomeEmailSent     bool       `json:\"welcomeEmailSent\"`\n\tWelcomeEmailSentAt   time.Time  `json:\"welcomeEmailSentAt\" sql:\"DEFAULT:null\"`\n\tPassword             string     `sql:\"-\"`\n\tPasswordConfirmation string     `sql:\"-\"`\n\tPasswordHash         string     `json:\"omitempty\"`\n\tPasswordSalt         string     `json:\"omitempty\"`\n\tResetPasswordToken   string     `json:\"resetPasswordToken,omitempty\"`\n\tResetPasswordCount   int        `json:\"resetPasswordCount,omitempty\"`\n\tVisitsCount          int        `json:\"visitsCount,omitempty\" sql:\"DEFAULT:0\"`\n\tCreatedAt            time.Time  `json:\"createdAt,omitempty\"`\n\tUpdatedAt            time.Time  `json:\"updatedAt,omitempty\"`\n\tDeletedAt            *time.Time `json:\"deletedAt,omitempty\"`\n}\n\n// FindUserBySlug - find an user by the given slug (uuid)\nfunc FindUserBySlug(db *gorm.DB, slug string) User {\n\tvar user User\n\tdb.Where(\"slug = ?\", slug).First(&user)\n\treturn user\n}\n\n// FindUserByDevice search for the owner of the device\nfunc FindUserByDevice(db *gorm.DB, clientMac string) (user User, err error) {\n\tdb.Table(\"users\").Scopes(NotDeleted).Select(\"users.id, users.slug, users.email\").Joins(\"INNER JOIN devices_users ON devices_users.user_id = users.id INNER JOIN devices ON devices_users.device_id = devices.id\").Where(\"mac = ?\", clientMac).Scan(&user)\n\treturn\n}\n\n// FindUserBySlugAndEmail - find an user by the given slug (uuid)\nfunc FindUserBySlugAndEmail(db *gorm.DB, slug, email string) User {\n\tvar user User\n\tdb.Where(\"slug = ? and email = ?\", slug, email).First(&user)\n\treturn user\n}\n\n// FindUserByEmail - find an user by the given email\nfunc FindUserByEmail(db *gorm.DB, email string) (user User, err error) {\n\tif len(email) == 0 {\n\t\terr = errors.New(\"Email inválido\")\n\t\treturn\n\t}\n\n\tdb.Where(\"email = ?\", email).First(&user)\n\tif user.ID == 0 {\n\t\terr = errors.New(\"Usuário não encontrado\")\n\t}\n\treturn\n}\n\n// FindFacebookUser - find an user registered with facebook.\n//FIXME: return error when user not found\nfunc FindFacebookUser(db *gorm.DB, provider, uid *string) (u User) {\n\tdb.Where(\"provider = ? and uid = ?\", provider, uid).First(&u)\n\treturn\n}\n\n// FindUserByPasswordToken - find an user by the given password_token\nfunc FindUserByPasswordToken(db *gorm.DB, token string) User {\n\tvar user User\n\tdb.Where(\"reset_password_token = ?\", token).First(&user)\n\treturn user\n}\n\n// CreateUser find or create user on\n// First checks if an user with the given email exists.\n// If exists, return, if not create and return\nfunc CreateUser(db *gorm.DB, user User) (createdUser User, err error) {\n\tdb.Where(User{Email: user.Email}).Assign(User{Phone: user.Phone, Gender: user.Gender, AcceptEmail: user.AcceptEmail, AcceptSms: user.AcceptSms}).FirstOrCreate(&createdUser)\n\n\tif createdUser.ID <= 0 {\n\t\tlog.WithFields(log.Fields{\"where\": \"CreateUser\", \"error\": \"db.Assign\"}).Error(\"user not created\")\n\t\terr = errors.New(\"ocorreu um erro\")\n\t}\n\n\treturn\n}\n\n// UpdateUser - update all different fields for a given user\nfunc UpdateUser(db *gorm.DB, user *User, newUser User) (updatedUser User, err error) {\n\tu := db.Model(&user).UpdateColumns(newUser)\n\tif u.Error != nil {\n\t\tlog.WithFields(log.Fields{\"where\": \"User\", \"error\": \"UpdateUser\"}).Error(u.Error)\n\t\terr = errors.New(getErrors(u.Error))\n\t} else {\n\t\tupdatedUser = newUser\n\t}\n\n\treturn\n}\n\n// SyncFBUser update the uid and provider for the given user\nfunc SyncFBUser(db *gorm.DB, user User, provider, uid *string) (updatedUser User, err error) {\n\tdb.Model(&user).Updates(User{Provider: provider, UID: uid})\n\tif user.Provider != provider {\n\t\terr = errors.New(\"Ocorreu um erro, por favor, tente novamente.\")\n\t} else {\n\t\tupdatedUser = user\n\t}\n\n\treturn\n}\n\n// UpdatePassword - update the password of the User\nfunc UpdatePassword(db *gorm.DB, u User, newPass string) (err error) {\n\tsalt := authgo.CreatePassword(newPass)\n\tdb.Model(&u).Updates(User{PasswordHash: salt.Hash, PasswordSalt: salt.Salt})\n\tif u.PasswordHash != salt.Hash && u.PasswordSalt != u.PasswordSalt {\n\t\terr = errors.New(\"Ocorreu um erro para trocar a senha, por favor, tente novamente.\")\n\t}\n\treturn\n}\n\n// DeleteUser - deletes an user\nfunc DeleteUser(db *gorm.DB, u User) (v bool) {\n\terr := db.Delete(&u).Error\n\tif err != nil {\n\t\tv = false\n\t} else {\n\t\tv = true\n\t}\n\treturn\n}\n\n// NotDeleted scope for not deleted users\nfunc NotDeleted(db *gorm.DB) *gorm.DB {\n\treturn db.Where(\"(deleted_at IS NULL OR deleted_at <= '0001-01-02')\")\n}\n\n// BeforeCreate - before save the user, salt the password\n// and create a new uuid string\nfunc (u *User) BeforeCreate() (err error) {\n\tif len(u.Password) > 0 {\n\t\tsalt := authgo.CreatePassword(u.Password)\n\t\tu.PasswordHash = salt.Hash\n\t\tu.PasswordSalt = salt.Salt\n\t}\n\tu.Slug = uuid.New()\n\tu.Username = u.Email\n\n\treturn\n}\n\n// CheckRequiredFields checks if ane of the required fields is nil\nfunc CheckRequiredFields(u User) (fields []string) {\n\tif utils.IsEmpty(u.Cpf) {\n\t\tfields = utils.Extend(fields, \"cpf\")\n\t}\n\n\tif utils.IsEmpty(u.Phone) {\n\t\tfields = utils.Extend(fields, \"phone\")\n\t}\n\n\tif utils.IsEmpty(u.BirthdateYear) || utils.IsEmpty(u.BirthdateMonth) || utils.IsEmpty(u.BirthdateDay) {\n\t\tfields = utils.Extend(fields, \"birthdate\")\n\t}\n\n\tif utils.IsEmpty(u.AcceptEmail) {\n\t\tfields = utils.Extend(fields, \"acceptEmail\")\n\t}\n\n\tif utils.IsEmpty(u.AcceptSms) {\n\t\tfields = utils.Extend(fields, \"acceptSms\")\n\t}\n\n\treturn\n}\n\nfunc getErrors(s error) (str string) {\n\tre, _ := regexp.Compile(`(\\d{4})(?:.*)'([a-zA-Z]+)'`)\n\tresult := re.FindStringSubmatch(s.Error())\n\n\tcode, key := result[1], result[2]\n\n\tif code == \"1062\" {\n\t\tstr = key + \" já cadastrado\"\n\t} else {\n\t\tstr = \"ocorreu um erro\"\n\t}\n\n\treturn\n}\n","markers":{"markers":{"1":{"id":1,"range":[[56,7],[56,7]],"tailed":false,"reversed":true,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":5508,"goalScreenRange":null,"clip":"forward","autoscroll":true,"preserveFolds":true},"deserializer":"Marker"},"176":{"id":176,"range":[[57,0],[57,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"387":{"id":387,"range":[[57,0],[57,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"555":{"id":555,"range":[[57,0],[57,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"564":{"id":564,"range":[[57,0],[57,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"631":{"id":631,"range":[[57,0],[57,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"806":{"id":806,"range":[[155,0],[160,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"886":{"id":886,"range":[[155,0],[160,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"925":{"id":925,"range":[[155,0],[160,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"940":{"id":940,"range":[[155,0],[160,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"963":{"id":963,"range":[[155,0],[160,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"1032":{"id":1032,"range":[[57,0],[57,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"1060":{"id":1060,"range":[[17,0],[44,61]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1061":{"id":1061,"range":[[56,0],[56,250]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1062":{"id":1062,"range":[[155,0],[159,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1066":{"id":1066,"range":[[17,0],[44,61]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1067":{"id":1067,"range":[[56,0],[56,250]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1068":{"id":1068,"range":[[155,0],[159,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1072":{"id":1072,"range":[[17,0],[45,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1073":{"id":1073,"range":[[56,0],[57,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1074":{"id":1074,"range":[[155,0],[160,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History","version":1},"encoding":"utf8","filePath":"/Users/ustrajunior/code/go/src/code.nextbit.com.br/superwifi_api/user.go","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"918fac463c3780bccb606b9f6609a165dddf85c8","deserializer":"TextBuffer"},{"text":"package main\n\nimport (\n\t\"github.com/jinzhu/gorm\"\n\n\t\"code.nextbit.com.br/superwifi_api/banners\"\n)\n\n// Authorization - checks if the user exists, authenticate on meraki\nfunc Authorization(db *gorm.DB, auth AuthenticationJSON, c chan APIResponse) {\n\tvar ar APIResponse\n\n\tclient := FindClientByApMac(db, auth.ApMac)\n\n\tif client.ID <= 0 {\n\t\ta := FailedAuthResponse{Success: false, Client: ClientData{Slug: client.Slug}, Errors: []GenericErrorData{GenericErrorData{Message: \"Ocorreu um problema, por favor tente novamente.\"}}}\n\t\tar = Unauthorized(a)\n\t} else {\n\t\tuser, _ := FindUserByDevice(db, auth.ClientMac)\n\n\t\tif user.ID > 0 {\n\t\t\tbanner := banners.Show(db, client.ID)\n\t\t\tgo AssociateClientUser(db, ClientUser{UserID: user.ID, ClientID: client.ID})\n\t\t\tcURL := \"http://www.superwifi.com.br\"\n\t\t\tar = Authorized(AuthResponse{Success: true, ContinueURL: cURL, Client: ClientData{Name: client.Name, Slug: client.Slug}, User: AuthData{UUID: user.Slug}, Banner: BannerResponse{Title: banner.Title, ImageURL: banner.Slug, LinkURL: banner.BannerLink}})\n\t\t} else {\n\t\t\ta := FailedAuthResponse{Success: false, Client: ClientData{Slug: client.Slug}}\n\t\t\tar = Unauthorized(a)\n\t\t}\n\t}\n\tc <- ar\n}\n\n// Login - checks if the user exists, authenticate on meraki\nfunc Login(db *gorm.DB, auth AuthenticationJSON, c chan APIResponse) {\n\tuser, _ := FindUserByDevice(db, auth.ClientMac)\n\n\tvar ar APIResponse\n\n\tclient := FindClientByApMac(db, auth.ApMac)\n\n\tif user.ID > 0 {\n\t\tradCheck := LoadCreateRadCheck(db, user.Email)\n\t\tmklogin := MerakiLogin(auth.LoginURL, user.Email, radCheck.Value)\n\n\t\tif mklogin {\n\t\t\tgo saveVisit(db, user.ID, auth.ClientMac, auth.ApTags, auth.UserAgent)\n\t\t\t//TODO: Create a func to handle this\n\t\t\tcURL := \"http://www.superwifi.com.br\"\n\t\t\tar = Authorized(AuthResponse{Success: true, ContinueURL: cURL, User: AuthData{UUID: user.Slug}})\n\t\t} else {\n\t\t\ta := FailedAuthResponse{Success: false, Client: ClientData{Slug: client.Slug}, Errors: []GenericErrorData{GenericErrorData{Message: \"usuário ou senha inválidos\"}}}\n\t\t\tar = Unauthorized(a)\n\t\t}\n\t} else {\n\t\ta := FailedAuthResponse{Success: false, Client: ClientData{Slug: client.Slug}, Errors: []GenericErrorData{GenericErrorData{Message: \"usuário ou senha inválidos\"}}}\n\t\tar = Unauthorized(a)\n\t}\n\tc <- ar\n}\n","markers":{"markers":{"1":{"id":1,"range":[[18,9],[18,9]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":5528,"goalScreenRange":null,"preserveFolds":true},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History","version":1},"encoding":"utf8","filePath":"/Users/ustrajunior/code/go/src/code.nextbit.com.br/superwifi_api/authorization.go","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"aeace7e20d0d166e7079250ed2e66b1d08389324","deserializer":"TextBuffer"},{"text":"package main\n\nimport (\n\t\"encoding/json\"\n\t\"net/http\"\n\t\"regexp\"\n\n\t\"code.nextbit.com.br/superwifi_api/banners\"\n\n\tlog \"github.com/Sirupsen/logrus\"\n\t\"github.com/gorilla/mux\"\n\t\"github.com/jinzhu/gorm\"\n)\n\n// CreateUserHandler - Handler for creating new users\n// Request:\n// {\n//   user: {\n//     phone: \"8412341234\",\n//     email: \"john@email.com\",\n//     gender: \"m\",\n//     provider: (\"facebook\" || \"\"),\n//     uid: (\"987654\" || \"\")\n//   }\n// }\n// Respose:\n// {\n//   success: true,\n//   user: {\n//     uuid: \"1234\"\n//   }\n// }\n//\n// {\n//   success: false,\n//   errors: [\n//    { name: [\"cannot be blank\", \"inform your last name\"] },\n//    { email: [\"cannot be blank\"] }\n//   ]\n// }\nfunc CreateUserHandler(db *gorm.DB) http.Handler {\n\treturn http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {\n\t\tvar userJSON UserJSON\n\n\t\terr := json.NewDecoder(req.Body).Decode(&userJSON)\n\t\tif err != nil {\n\t\t\tlog.WithFields(log.Fields{\"where\": \"CreateUserHandler\", \"error\": \"json.NewDecoder\"}).Error(err.Error())\n\t\t}\n\n\t\tclient := FindClientByApMac(db, userJSON.ApMac)\n\n\t\tvar ar APIResponse\n\t\tuser := userJSON.User\n\n\t\tr := regexp.MustCompile(`^([0-9a-fA-F][0-9a-fA-F]:){5}([0-9a-fA-F][0-9a-fA-F])$`)\n\n\t\tif r.MatchString(userJSON.ClientMac) {\n\t\t\tuserValidation, valid := validateUser(user)\n\t\t\tif !valid {\n\t\t\t\tar = UserValidationResponse(userValidation)\n\t\t\t} else {\n\t\t\t\tu, err := CreateUser(db, user)\n\t\t\t\tif err != nil {\n\t\t\t\t\tar = UserNotCreated(err.Error())\n\t\t\t\t} else {\n\t\t\t\t\tbanner := banners.Show(db, client.ID)\n\t\t\t\t\tcURL := \"http://www.superwifi.com.br\"\n\t\t\t\t\tar = UserCreated(UserResponse{Success: true, ContinueURL: cURL, User: AuthData{UUID: u.Slug}, Banner: BannerResponse{Title: banner.Title, ImageURL: banner.Slug, LinkURL: banner.BannerLink}})\n\t\t\t\t\tdevice := Device{UserID: u.ID, Mac: userJSON.ClientMac}\n\t\t\t\t\tgo device.Save(db)\n\t\t\t\t\tgo AssociateClientUser(db, ClientUser{UserID: u.ID, ClientID: client.ID})\n\t\t\t\t\tif !u.WelcomeEmailSent {\n\t\t\t\t\t\tgo SendRegistrationMail(db, u, client)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\ta := GenericMessageResponse{Success: false, Errors: []GenericErrorData{GenericErrorData{Message: \"Ocorreu um problema, por favor, tente novamente.\"}}}\n\t\t\tar = GenericBadRequestResponse(a)\n\t\t}\n\n\t\tres.WriteHeader(ar.StatusCode)\n\t\tres.Write(ar.Message)\n\t})\n}\n\n// UpdateUserHandler update the user fields.\n// Request:\n// {\n//   user: {\n//     cpf: \"11111111111\",\n//     phone: \"88776655\",\n//     birthdate_day: \"01\",\n//     birthdate_month: \"01\",\n//     birthdate_year: \"1990\",\n//     accept_email: true,\n//     accept_sms: true\n//   }\n// }\n//\n// Response:\n// {\n//   success: true,\n//   user: {\n//     uuid: \"1234\"\n//   }\n// }\n//\n// {\n//   success: false,\n//   errors: [\n//    { name: [\"cannot be blank\", \"inform your last name\"] },\n//    { email: [\"cannot be blank\"] }\n//   ]\n// }\nfunc UpdateUserHandler(db *gorm.DB) http.Handler {\n\treturn http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {\n\t\tvars := mux.Vars(req)\n\t\tslug := vars[\"slug\"]\n\n\t\tvar ar APIResponse\n\n\t\tuser := FindUserBySlug(db, slug)\n\n\t\tif user.Slug != \"\" {\n\t\t\tvar userJSON UserJSON\n\n\t\t\terr := json.NewDecoder(req.Body).Decode(&userJSON)\n\t\t\tif err != nil {\n\t\t\t\tlog.WithFields(log.Fields{\"where\": \"CreateUserHandler\", \"error\": \"json.NewDecoder\"}).Error(err.Error())\n\t\t\t}\n\n\t\t\t_, err = UpdateUser(db, &user, userJSON.User)\n\t\t\tif err != nil {\n\t\t\t\tar = UserNotUpdated(err.Error())\n\t\t\t} else {\n\t\t\t\tur := UserResponse{Success: true, User: AuthData{UUID: user.Slug}}\n\t\t\t\tar = UserUpdated(ur)\n\t\t\t}\n\t\t} else {\n\t\t\tar = UserNotFound()\n\t\t}\n\n\t\tres.WriteHeader(ar.StatusCode)\n\t\tres.Write(ar.Message)\n\t})\n}\n\n// UnsubscribeHandler - delete an user\n// Request:\n// url.com/users/unsubscribe/uuid\n//\n// Response:\n// {\n//   success: true\n// }\n//\n// {\n//   success: false,\n//   errors: [\n//    { username: [\"Usuario não encontrado\"] },\n//    { message: \"ocorreu um erro\" }\n//   ]\n// }\nfunc UnsubscribeHandler(db *gorm.DB) http.Handler {\n\treturn http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {\n\t\tvar userJSON UserJSON\n\n\t\terr := json.NewDecoder(req.Body).Decode(&userJSON)\n\t\tif err != nil {\n\t\t\tlog.WithFields(log.Fields{\"where\": \"CreateUserHandler\", \"error\": \"json.NewDecoder\"}).Error(err.Error())\n\t\t}\n\n\t\tvar ar APIResponse\n\t\tuser := FindUserBySlugAndEmail(db, userJSON.User.Slug, userJSON.User.Email)\n\t\tif user.ID > 0 {\n\t\t\tdeleted := DeleteUser(db, user)\n\t\t\tif deleted {\n\t\t\t\ta := GenericMessageResponse{Success: true}\n\t\t\t\tar = GenericStatusOKResponse(a)\n\t\t\t} else {\n\t\t\t\tmsg := \"ocorreu um erro, por favor, tente novamente\"\n\t\t\t\ta := GenericMessageResponse{Success: false, Errors: []GenericErrorData{GenericErrorData{Message: msg}}}\n\t\t\t\tar = GenericBadRequestResponse(a)\n\t\t\t}\n\t\t} else {\n\t\t\tmsg := \"token inválido\"\n\t\t\ta := GenericMessageResponse{Success: false, Errors: []GenericErrorData{GenericErrorData{Message: msg}}}\n\t\t\tar = GenericBadRequestResponse(a)\n\t\t}\n\n\t\tres.WriteHeader(ar.StatusCode)\n\t\tres.Write(ar.Message)\n\t})\n}\n\nfunc validateUser(user User) (userValidation UserValidation, valid bool) {\n\terrs := ValidUser(user)\n\tvalid = errs.Valid\n\tif !valid {\n\t\tvar fieldsError FieldsError\n\t\tfieldsError.Name = errs.Name\n\t\tfieldsError.Email = errs.Email\n\t\tfieldsError.BirthdateDay = errs.BirthdateDay\n\t\tfieldsError.BirthdateMonth = errs.BirthdateMonth\n\t\tfieldsError.BirthdateYear = errs.BirthdateYear\n\t\tfieldsError.Gender = errs.Gender\n\t\tfieldsError.Password = errs.Password\n\t\tuserValidation.Errors = fieldsError\n\t}\n\n\treturn\n}\n","markers":{"markers":{"1":{"id":1,"range":[[48,0],[48,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":5536,"goalScreenRange":null,"preserveFolds":true},"deserializer":"Marker"},"15":{"id":15,"range":[[65,23],[65,23]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"16":{"id":16,"range":[[65,23],[65,23]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"18":{"id":18,"range":[[48,0],[48,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History","version":1},"encoding":"utf8","filePath":"/Users/ustrajunior/code/go/src/code.nextbit.com.br/superwifi_api/users_ctrl.go","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"bcf67ae181ed8c09f32c6b3046c5b0e84dbba003","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"id":3,"items":[{"id":5528,"softTabs":false,"displayBuffer":{"id":5529,"softWrapped":true,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/ustrajunior/code/go/src/code.nextbit.com.br/superwifi_api/authorization.go","invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"TokenizedBuffer"},"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":5508,"softTabs":false,"displayBuffer":{"id":5509,"softWrapped":true,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/ustrajunior/code/go/src/code.nextbit.com.br/superwifi_api/user.go","invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"TokenizedBuffer"},"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":5536,"softTabs":false,"displayBuffer":{"id":5537,"softWrapped":true,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/ustrajunior/code/go/src/code.nextbit.com.br/superwifi_api/users_ctrl.go","invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"TokenizedBuffer"},"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"deserializer":"SettingsView","version":2,"activePanelName":"Settings","uri":"atom://config"}],"activeItemURI":"/Users/ustrajunior/code/go/src/code.nextbit.com.br/superwifi_api/users_ctrl.go","focused":true,"flexScale":1,"deserializer":"Pane"},"activePaneId":3,"deserializer":"PaneContainer","version":1},"fullScreen":false,"packagesWithActiveGrammars":["language-go","language-hyperlink","language-todo"],"deserializer":"Workspace"},"packageStates":{"fuzzy-finder":{"/Users/ustrajunior/code/go/src/code.nextbit.com.br/superwifi_api/authorization.go":1430762662876,"/Users/ustrajunior/code/go/src/code.nextbit.com.br/superwifi_api/user.go":1430762768501,"/Users/ustrajunior/code/go/src/code.nextbit.com.br/superwifi_api/users_ctrl.go":1430830892837},"keybinding-resolver":{},"metrics":{"sessionLength":2168036},"tree-view":{"directoryExpansionStates":{"/Users/ustrajunior/code/go/src/code.nextbit.com.br/superwifi_api":{"isExpanded":true,"entries":{".elasticbeanstalk":{"isExpanded":false,"entries":{}},".git":{"isExpanded":false,"entries":{}},"banners":{"isExpanded":false,"entries":{}},"configs":{"isExpanded":false,"entries":{}},"Godeps":{"isExpanded":false,"entries":{}},"scripts":{"isExpanded":false,"entries":{}},"utils":{"isExpanded":false,"entries":{}}}}},"selectedPath":"/Users/ustrajunior/code/go/src/code.nextbit.com.br/superwifi_api/users_ctrl.go","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":228,"width":200},"find-and-replace":{"viewState":"","modelState":{"useRegex":false,"inCurrentSelection":false,"caseSensitive":false,"wholeWord":false},"projectViewState":"","resultsModelState":{"useRegex":false,"caseSensitive":false},"findHistory":[".Show","ApMac","associate","AuthenticationHandler","Login","FailedAuthResponse",".Debug()","AssociateClientUser","Show","ClientID","app.","FindClientByApMac","emails","Notify","superwifi_api/models","models","models.","validations.","models.","FindUserBySlugAndEmail","createdUser","UserJSON","DeleteUser","FindUserByDevice","Joins"],"replaceHistory":["BirthdateMonth","BirthdateYear","empty","user","APIResponse","database.GetDB().","cUser"],"pathsHistory":["BirthdateMonth","BirthdateYear","empty","user","APIResponse","database.GetDB().","cUser"]},"todo-list":{}}}